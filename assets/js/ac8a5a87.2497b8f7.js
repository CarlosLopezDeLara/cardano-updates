"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[25853],{33480:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"2023-Q2-consensus","metadata":{"permalink":"/cardano-updates/quarterly/2023-Q2-consensus","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/quarterly/2023-Q2-consensus.md","source":"@site/quarterly/2023-Q2-consensus.md","title":"Consensus Q2 2023 Update","description":"2023-04 -- 2023-06","date":"2023-07-16T17:45:45.000Z","formattedDate":"July 16, 2023","tags":[{"label":"consensus","permalink":"/cardano-updates/quarterly/tags/consensus"}],"readingTime":4.47,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Q2 2023 Update","slug":"2023-Q2-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"nextItem":{"title":"Consensus Quarterly Update","permalink":"/cardano-updates/quarterly/2023-04-25-consensus"}},"content":"## 2023-04 -- 2023-06\\n\\n### Main achievements\\n\\n#### UTxO HD\\n\\n- We finished a major prototype refactoring, which includes:\\n    - A better and finer grained DB lock mechanism.\\n    - Elimination of race conditions.\\n    - Support for configuring batch query size and flushing rate. This is crucial to allow node users to tweak performance.\\n    - Architectural simplifications and performance improvements.\\n- We implemented a new package to support db-sync integration with UTxO-HD.\\n- We ran another set of ad-hoc benchmarks:\\n    - We uncovered a performance regression on the Network component when using `GHC-9.2/9.4`.\\n    - The synchronization and replay speed are as expected.\\n    - However, we uncovered memory consumption issues (see figure below).\\n        - The in-memory backend is consuming more memory than the baseline.\\n        - The LMDB backend shows an unexpected memory usage peak.\\n        - Investigation on these issues is ongoing.\\n- We integrated the latest changes in `main` branch.\\n    - This required a re-design of the mempool to include the mempool fairness\\n      improvement.\\n\\n![](/images/consensus/2023-Q2-utxo-hd-sync-ad-hoc-benchmarks.png)\\n\\n#### Genesis\\n\\n- The Genesis work for this PI focused on an high-priority issue from the IOG Researchers\' feedback on the proposal.\\n    - This particular question was not anticipated when the Q2 PI was planned.\\n    - As a result, the chain generators work, the ChainSync Jumping performance work, and the Genesis node prototype work were deprioritized.\\n    - That work has accordingly been rolled over into the Statement of Work for the first Genesis vendor work package.\\n- The IOG Researchers\' feedback on the design was very valuable. It had two primary effects.\\n- Outcome 1: We re-introduced distinct behaviors when the node is \\"syncing\\" versus when it is \\"caught up\\".\\n    - This eliminated a DoS vector introduced by the proposal, instead of having to argue that it was well-mitigated.\\n    - The additional design complexity is relatively small.\\n- Outcome 2: The issue that was unanticipated is whether the Cardano chain is consistently dense enough to rely on Genesis without any checkpointing.\\n    - The determination so far is that---assuming the adversary never controls more than four of the seven genesis keys---the most vulnerable segment is in the pure Praos era.\\n    - All the preceding windows are significantly more robust, including the entire Byron and Transitional Praos eras.\\n    - Thus checkpointing is not necessary for the initial Genesis release, though it still may be a reasonable addition later.\\n    - The primary invention was a model for bounding how much benefit the adversary\'s long-range attack could possibly gain from Praos\'s natural short forks.\\n- Relevant questions that the IOG Researchers are still assessing.\\n    - These do not block the Genesis implementation, but do affect the ultimate values of specific parameters.\\n    - Question 1: what is the upper bound on the duration of an eclipse that a healthy Praos node will survive?\\n    - Question 2: what is the upper bound on how much grinding can improve the adversary\'s leader schedule within some Genesis window?\\n\\n#### Support\\n- We performed an analysis on number of file descriptors used by Consensus, this\\n  information can be used by the node operators to check if the number of file\\n  descriptors they want to support are enough, thus improving the user (eg node\\n  operator) experience.\\n- We implemented a mempool fairness improvement, by which transactions are\\n  guaranteed to be processed irrespective of their size.\\n\\n#### Technical debt\\n\\n- We fixed a bug in followers logic, which was discovered by our `QuickCheck`\\nproperty tests.\\n- We created an [immutable DB\\n  server](https://github.com/input-output-hk/ouroboros-consensus/pull/68). This tool allows to serve blocks from the immutable DB to a node that connects to it. This has a remarkable value for testing and benchmarking purposes. For instance, by using this component, we can benchmark the performance of different aspects of Consensus, such as syncing from scratch, without adding Network interference in the performance results.\\n- We created a [`db-truncater`](https://github.com/input-output-hk/ouroboros-consensus/pull/70) tool, which can be used in disaster recovery and benchmarking scenarios.\\n- We created a [benchmarks comparison tool](https://github.com/input-output-hk/ouroboros-consensus/pull/161) that we plan on using for comparing the performance of two Consensus releases. This will allow us to catch performance regressions early on in the process, before they make it to the node (and show in the system level benchmark tests), thus greatly saving development costs. As an example, the graph below shows the performance *improvements* introduced by the Ledger team in version `0.6.0.0` of Consensus wrt version `0.5.0.0`.\\n\\n![](/images/consensus/2023-Q2-beacon-graph.png)\\n\\n#### Fostering collaboration\\n\\n- We released `fs-sim` as open-source repository. This lowers the barrier to entry for external contributors, which will indirectly benefit the Cardano project.\\n- We migrated the consensus code to a [new repository](https://github.com/input-output-hk/ouroboros-consensus), splitting\\nit from the `ouroboros-network` repository. This will save development effort for both the Network and the Consensus teams, since there will be less interference (for instance when making releases).\\n- We made several improvements to our release processes, which will translate in time savings. As an example, we went from 16 to 4 packages, which makes the release process simpler and smother. Our release process now makes it easier to align versions and make releases (both for us and for our downstream users).\\n- We added an explanation of the hardfork-combinator forecast horizon, that will benefit not only our team, but future external contributors.\\n\\n### Next steps\\n\\n#### UTxO HD\\n\\n- We will [get UTxO-HD ready for handover](https://github.com/input-output-hk/ouroboros-consensus/issues/28).\\n\\n#### Genesis\\n\\n- We will regularly liaise with the vendor(s) satisfying the Genesis Statement(s) of Work."},{"id":"2023-04-25-consensus","metadata":{"permalink":"/cardano-updates/quarterly/2023-04-25-consensus","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/quarterly/2023-04-25-consensus.md","source":"@site/quarterly/2023-04-25-consensus.md","title":"Consensus Quarterly Update","description":"Consensus Quarterly Update","date":"2023-04-25T00:00:00.000Z","formattedDate":"April 25, 2023","tags":[{"label":"consensus","permalink":"/cardano-updates/quarterly/tags/consensus"}],"readingTime":2.3,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Quarterly Update","slug":"2023-04-25-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Q2 2023 Update","permalink":"/cardano-updates/quarterly/2023-Q2-consensus"},"nextItem":{"title":"Network Team Update","permalink":"/cardano-updates/quarterly/2023-04-04-network"}},"content":"## Consensus Quarterly Update\\n## 2023-01 - 2023-03\\n\\n### Main achievements\\n\\n#### UTxO HD\\n\\n- We finished the testing activities for the prototype, which involved adding\\n  new tests, and fixing and enabling temporarily disabled tests.\\n- We spent a substantial amount of effort refactoring and cleaning the\\n  prototype.\\n- We audited the UTxO HD prototype to make sure it can accommodate the migration\\n  of other tables (eg stake-keys registration) from memory to disk. The result\\n  of the audit was positive.\\n- We ran ad-hoc benchmarks for reading keys and flushing values to disk. No\\n  unexpected costs found.\\n- We ran the first system level benchmarks. The performance regressions reported\\n  were due to an unrealistic snapshotting rate. We need to re-run them again\\n  after we design a more fine grained locking mechanism.\\n\\n#### Genesis\\n\\n- We elaborated a roadmap of the remaining work for Genesis.\\n- We presented the design to the IOG Researchers and PNSol on February 20. The\\n  design was well received. We updated the Genesis design with the researcher\'s\\n  feedback.\\n    - We plugged the new DoS vector identified during the aforementioned\\n      presentation.\\n- We developed a generator for adversarial leader schedules that satisfy key\\n  Ouroboros properties, which will be used to test the Genesis design.\\n    - The generator enables use of smaller Ouroboros parameters, which makes\\n      extrema more likely and counterxamples easier interpret.\\n- We wrote up the latest design iteration.\\n- We continued benchmarking the Chain Sync Jumping prototype. In particular:\\n    - We debugged the prototype\'s performance regression, and unmasked the\\n      actual cause by patching our initial theory (bad queuing behavior)\\n    - We identified and validated the actual cause (a pathological case in\\n      BlockFetch tiebreaker).\\n\\n#### Support\\n\\n- We created two new tools. One for dumping CBOR encoded blocks to JSON. Ahother\\n  to serve a local immutable DB.\\n\\n#### Conway era\\n\\n- We integrated the Conway era into consensus.\\n\\n#### Technical debt\\n\\n- We fixed a bug with followers, which was discovered by property tests.\\n- We developed a DSL for specifying and running ChainDB test cases.\\n- We fixed failing tests with iterators.\\n- We created micro-benchmarks for adding transactions to the mempool.\\n\\n#### Fostering collaboration\\n\\n- We released a new technical documentation site for consensus.\\n- We factored out several packages to external repositories. Some of this work\\n  originated in the UTxO HD workstream.\\n\\n### Next steps\\n\\n#### UTxO HD\\n\\n- https://github.com/input-output-hk/ouroboros-consensus/issues/28\\n\\n#### Genesis\\n\\n- https://github.com/input-output-hk/ouroboros-consensus/issues/33\\n- https://github.com/input-output-hk/ouroboros-consensus/issues/32\\n- https://github.com/input-output-hk/ouroboros-consensus/issues/31\\n\\n#### Support\\n\\n- Design Consensus side of hardfork-enactment in the Voltaire phase\\n  ([#4180](https://github.com/input-output-hk/ouroboros-network/issues/4180)).\\n- Estimate the number of file descriptors Consensus needs\\n  [#20](https://github.com/input-output-hk/ouroboros-consensus/issues/20).\\n\\n#### Tech debt\\n\\n- Identify Quantitative Timeliness Agreements (QTAs) metrics that we can define\\n  for consensus. Pick one and implement benchmarks for it.\\n\\n#### Fostering collaboration\\n\\n- Onboard a new team member."},{"id":"2023-04-04-network","metadata":{"permalink":"/cardano-updates/quarterly/2023-04-04-network","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/quarterly/2023-04-04-network.md","source":"@site/quarterly/2023-04-04-network.md","title":"Network Team Update","description":"Network Quarterly Update","date":"2023-04-04T00:00:00.000Z","formattedDate":"April 4, 2023","tags":[{"label":"network","permalink":"/cardano-updates/quarterly/tags/network"}],"readingTime":2.64,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Network Team Update","slug":"2023-04-04-network","authors":"coot","tags":["network"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Quarterly Update","permalink":"/cardano-updates/quarterly/2023-04-25-consensus"},"nextItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/quarterly/2023-04-03-ledger"}},"content":"## Network Quarterly Update\\n## 2023-01 - 2023-03\\n\\n### Main achievements\\n\\n#### Gradual dynamic P2P release on mainnet\\n\\nWe released two version of `cardano-node` with dynamic P2P capabilities:\\n\\n* [`1.35.6`][cardano-node-1.35.6]\\n  - we found and fixed a bug in exception handling in `peer-state-actions`\\n    [pull-4357]\\n  - we found and fixed a busy loop when demoting a peer from hot to warm [pull-4385] \\n* [`1.35.7`][cardano-node-1.35.7]\\n  - includes interoperability in the legacy non-p2p network stack [pull-4467]\\n* we fixed a busy loop of demotion & promotions: `warm -> hot -> warm`\\n  [pull-4485] /it will be included in `cardano-node-8.0.0` release/.\\n\\nCurrently there are more than 200 P2P relays on mainnet.\\n\\n#### Peer Sharing\\n\\nWe implemented /peer sharing/ [pull-4019] which will be available as an\\nexperimental feature in one of the future `cardano-node` releases.\\n\\nWe implemented /light peer sharing/, e.g. adding inbound connections to the set\\nof known peers of the outbound governor, which allows to bootstrap relays not\\nregistered on chain.  This complements peer sharing.  The [pull-4277] is in\\nlate review stages.\\n\\n#### Eclipse Evasion\\n\\nWe finalised design of eclipse evasion and we started implementing it.  We\\nhave an initial implementation (not merged). We are in the process of extending\\nour test suite to cover new implementation details: [issue-3886], [pull-4462].\\n\\n#### Cardano Network Service Assurance\\n\\nGalois has been making progress on _Cardano Network Service Assurance_ project.\\n\\n* In cardano-node, they have developed a `datapoint` abstraction that creates\\n  a queue of (existing) log events, they now have two such `datapoint`s (of log\\n  events) implemented.\\n\\n* They have developed a `datapoint` client executable that can connect to a node\\n  which serves the \\"new tracing\\".\\n\\n* They have been exploring approaches for the consolidation and analysis of\\n  `datapoint` data to extract actionable network health status.\\n\\n#### Cardano-Node\\n\\n* We made it possible to configure accepted connections limit [pull-4902].\\n\\n#### Testing improvements\\n\\n* We fixed a bug in network simulation implementation of TCP simultaneous open [pull-4265].\\n\\n* We introduced header-body split in the diffusion simulation [pull-4419] (in review).\\n\\n* We introduced initiator only nodes in the diffusion simulation [pull-4280].\\n\\n* We fixed a connection-manager test failure [issue-4370].\\n\\n#### Technical Debt\\n\\n* We refactored `Snocket` interface decoupling it from the multiplexer\\n  [pull-4260]. This simplified some aspects of the KES agent implementation.\\n\\n* We introduces a record for CBOR codecs which are used for various data\\n  structures by mini-protocol codecs [pull-4430].\\n\\n#### Documentation\\n\\n* We explained some limitations of CDDL in our technical report [pull-4351].\\n\\n#### IO-Sim\\n\\n* We fixed implementation of `MVar`\'s [pull-70].\\n\\n#### NoThunks\\n\\n* We published a new version of [`nothunks`] library to Hackage.\\n\\n### Next steps\\n\\n* Finish implementation & testing of eclipse evasion [issue-3886].\\n* Optimise connectivity to peers behind firewall [issue-4381].\\n* Finish the work on enabling block production dynamically to allow using P2P\\n  on block producers [issue-3159].\\n* If time permits we would like also to reserve some time for finishing\\n  publication of `io-sim` to Hackage.\\n\\n\\n[cardano-node-1.35.6]: https://github.com/input-output-hk/cardano-node/releases/tag/1.35.6\\n[cardano-node-1.35.7]: https://github.com/input-output-hk/cardano-node/releases/tag/1.35.7\\n\\n[pull-4019]: https://github.com/input-output-hk/ouroboros-network/pull/4019\\n[pull-4277]: https://github.com/input-output-hk/ouroboros-network/pull/4277\\n[pull-4260]: https://github.com/input-output-hk/ouroboros-network/pull/4260\\n[pull-4265]: https://github.com/input-output-hk/ouroboros-network/pull/4265\\n[pull-4280]: https://github.com/input-output-hk/ouroboros-network/pull/4280\\n[pull-4351]: https://github.com/input-output-hk/ouroboros-network/pull/4351\\n[pull-4357]: https://github.com/input-output-hk/ouroboros-network/pull/4357\\n[pull-4385]: https://github.com/input-output-hk/ouroboros-network/pull/4385\\n[pull-4430]: https://github.com/input-output-hk/outoboros-network/pull/4430\\n[pull-4460]: https://github.com/input-output-hk/outoboros-network/pull/4460\\n[pull-4462]: https://github.com/input-output-hk/outoboros-network/pull/4462\\n[pull-4465]: https://github.com/input-output-hk/outoboros-network/pull/4465\\n[pull-4467]: https://github.com/input-output-hk/outoboros-network/pull/4467\\n[pull-4419]: https://github.com/input-output-hk/outoboros-network/pull/4419\\n\\n[pull-4902]: https://github.com/input-output-hk/cardano-node/pull/4902\\n\\n[issue-3159]: https://github.com/input-output-hk/ouroboros-network/issues/3159\\n[issue-3886]: https://github.com/input-output-hk/ouroboros-network/issues/3886\\n[issue-4370]: https://github.com/input-output-hk/ouroboros-network/issues/4370\\n[issue-4381]: https://github.com/input-output-hk/ouroboros-network/issues/4381\\n\\n[pull-70]: https://github.com/input-output-hk/io-sim/pull/70\\n\\n[`nothunks`]: https://hackage.haskell.org/package/nothunks"},{"id":"2023-04-03-ledger","metadata":{"permalink":"/cardano-updates/quarterly/2023-04-03-ledger","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/quarterly/2023-04-03-ledger.md","source":"@site/quarterly/2023-04-03-ledger.md","title":"Ledger Team Update","description":"Ledger Quarterly Update","date":"2023-04-03T00:00:00.000Z","formattedDate":"April 3, 2023","tags":[{"label":"ledger","permalink":"/cardano-updates/quarterly/tags/ledger"}],"readingTime":6.405,"hasTruncateMarker":false,"authors":[{"name":"Jared Corduan","title":"Ledger Team Lead","url":"https://github.com/JaredCorduan","imageURL":"https://github.com/JaredCorduan.png","key":"JaredCorduan"}],"frontMatter":{"title":"Ledger Team Update","slug":"2023-04-03-ledger","authors":"JaredCorduan","tags":["ledger"],"hide_table_of_contents":false},"prevItem":{"title":"Network Team Update","permalink":"/cardano-updates/quarterly/2023-04-04-network"},"nextItem":{"title":"Consensus Quarterly Update","permalink":"/cardano-updates/quarterly/2023-01-18-consensus"}},"content":"## Ledger Quarterly Update\\n## 2023-01 - 2023-03\\n\\n### Main achievements\\n\\n#### CIPs\\n\\n* **Entering the Voltaire phase** -\\n  CIP-1694 received a major update after participation in the design has expanded to\\n  more and more people, including those who attended the Colorado workshop.\\n  See [CIP-1694](https://github.com/cardano-foundation/CIPs/pull/380).\\n* **Ledger CIP category** -\\n  The ledger team continues to embrace the CIP process, and has begun the process of\\n  registering the ledger as an official CIP category.\\n  See [CIP-84](https://github.com/cardano-foundation/CIPs/pull/456).\\n* **Ledger serialization** -\\n  A CIP for the ledger serialization deprecation cycle has been accepted.\\n  See [CIP-80](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0080).\\n\\n#### Formal ledger model\\n\\nOur new formal specifications backed by Agda have seen a lot of progress.\\nThe majority of the ideas in CIP-1694 are now present, and we have made enough progress\\nthat we can now safely say that the PDF produced by the Agda model will be the\\nofficial ledger specification for the Conway ledger era.\\nSee [the repository](https://github.com/input-output-hk/formal-ledger-specifications).\\n\\n\\n#### Conway ledger era\\n\\nProgress on the Haskell implementation of CIP-1694 has gone hand in hand with the formal model.\\nThe major component still missing is the DRep stake distribution, which still presents some\\ntechnical challenges.\\n\\n[[pull-3176]]\\n[[pull-3216]]\\n[[pull-3226]]\\n[[pull-3291]]\\n[[pull-3326]]\\n[[pull-3330]]\\n[[pull-3339]]\\n\\n#### DRep stake distribution computation\\n\\nAdding another large stake distribution to the ledger state must proceed with caution.\\nWe do not want the memory used by the node to increase too much,\\nand performance problems can lead to reduced block production.\\nWe have prototyped, tested, and benchmarked several approaches that could give us\\nthe current DRep stake distribution at each epoch boundary.\\nThis has very important implications, since we want every ADA holder to be able to at any\\ntime (such as during a contentious vote) register themselves as a DRep and still have time\\nto vote themselves on the issue.\\n\\n[[pull-3344]]\\n[[pull-3353]]\\n[[pull-3364]]\\n\\n#### Integration work\\n\\nThe ledger has made some wonderful improvements over the past six months,\\nbut which entail a significant amount of integration efforts:\\n\\n* Our new versioned CBOR schemes\\n* Individual deposit tracking\\n* An improved cross-era interface utilizing lenses\\n* A new ledger API\\n* Re-arranging the ledger stake in preparation for CIP-1694\\n* Versioning our Haskell packages\\n  using [CHaPs](https://github.com/input-output-hk/cardano-haskell-packages).\\n* Consistent conventions for variable names\\n\\n\\n[[pull-3279]]\\n[[pull-3282]]\\n[[pull-3288]]\\n[[pull-3289]]\\n[[pull-3292]]\\n[[pull-3297]]\\n[[pull-3298]]\\n[[pull-3299]]\\n[[pull-3300]]\\n[[pull-3302]]\\n[[pull-3303]]\\n[[pull-3308]]\\n[[pull-3342]]\\n[[pull-3345]]\\n[[pull-3356]]\\n[[pull-3357]]\\n[[pull-3360]]\\n[[pull-3361]]\\n[[pull-3363]]\\n[[pull-4349]]\\n[[pull-378]]\\n[[pull-376]]\\n[[pull-373]]\\n[[pull-370]]\\n[[pull-361]]\\n[[pull-4976]]\\n[[pull-5013]]\\n\\n#### Deposit tracking\\n\\nIndividual deposits (for stake credential and stake pool registrations) were not tracked by the ledger.\\nDeposits were returned according to the current protocol parameters.\\nWhen the values of these two protocol parameters change, the deposit pot\\nis adjusted by adding to, or removing from, the reserves.\\n\\nThis has several problems:\\n* Most people expect a deposit to be paid back exactly.\\n* We cannot increase the deposit amount once the reserves hits zero.\\n* If it becomes known that the deposit amount is going to be increased, free Lovelace can be earned by registering credentials.\\n* Because of the problems above, it is going to be incredibly hard to ever change the values.\\n* There is a serious issue involving hard forks.\\n  The consensus layer makes the decision about whether or not to enact a hard fork based on\\n  the protocol parameter update state two stability windows before the end of the epoch.\\n  However, the ledger will reject a protocol parameter update on the epoch boundary\\n  if the deposit pot adjustments cannot be reconciled with the reseve pot.\\n  This means that if quorum is met regarding changing the major protocol version,\\n  but the update is rejected on the epoch boundary, consensus will change the era but the\\n  ledger will not change the major protocol version, leaving the ledger in a split-brain state.\\n\\nBecause we never actually changed the values of the two deposits amounts in the protocol parameters\\non mainnet, we were able to retroactively change the behavior.\\nWe made the following changes:\\n  * Individual deposits are tracked in the `DState`.\\n  * The amount deposited is always returned.\\n\\n[[pull-3195]]\\n[[pull-3202]]\\n[[pull-3217]]\\n\\n#### New ledger API\\n\\nWe have significantly built up the ledger API.\\nWe will eventually replace much of the `cardano-api` in the node repository with this ledger API.\\n\\n[[pull-3242]]\\n[[pull-3248]]\\n[[pull-3328]]\\n\\n#### Constraint-based generators\\n\\nOur largest scale property tests generate an initial ledger state and a long sequence of valid blocks\\nwhich span several epochs, mimicking a real network.\\nThese tests are, in theory, excellent for checking properties.\\nThey are, however, very difficult to maintain and are not as random as we would like\\n(a lot of bias has to be introduced to keep the ledger state in enough order to keep generating blocks).\\n\\nWe have a new declaritive infrastructure for building constraint-based generators,\\nwhich instead generate a random ledger state representative of not just an initial state,\\nbut also those representative of the end result of a long sequence of valid blocks.\\nMoreover, these generators are very fast and are much more random than our old generators.\\nBefore we can start using them for our existing property tests, however, we still need to\\nexpand them to generate a valid block for a given ledger state.\\n\\n[[pull-3219]]\\n\\n#### Technical debt\\n\\nWe continued to address technical debt as much as we can.\\n\\n[[pull-3167]]\\n[[pull-3170]]\\n[[pull-3172]]\\n[[pull-3175]]\\n[[pull-3184]]\\n[[pull-3205]]\\n[[pull-3208]]\\n[[pull-3210]]\\n[[pull-3212]]\\n[[pull-3218]]\\n[[pull-3222]]\\n[[pull-3223]]\\n[[pull-3224]]\\n[[pull-3225]]\\n[[pull-3229]]\\n[[pull-3239]]\\n[[pull-3241]]\\n[[pull-3244]]\\n[[pull-3245]]\\n[[pull-3249]]\\n[[pull-3260]]\\n[[pull-3263]]\\n[[pull-3264]]\\n[[pull-3268]]\\n[[pull-3269]]\\n[[pull-3270]]\\n[[pull-3274]]\\n[[pull-3276]]\\n[[pull-3277]]\\n[[pull-3286]]\\n[[pull-3290]]\\n[[pull-3295]]\\n[[pull-3296]]\\n[[pull-3306]]\\n[[pull-3307]]\\n[[pull-3310]]\\n[[pull-3311]]\\n[[pull-3316]]\\n[[pull-3320]]\\n[[pull-3323]]\\n[[pull-3327]]\\n[[pull-3331]]\\n[[pull-3332]]\\n[[pull-3333]]\\n[[pull-3338]]\\n[[pull-3341]]\\n[[pull-3347]]\\n[[pull-3350]]\\n[[pull-3351]]\\n[[pull-3352]]\\n[[pull-3354]]\\n\\n##### Critical fixes\\n\\nWe fixed two critical issues:\\n* Growing block production delay on the epoch boundary: [[pull-3209]]\\n* Unexpected node shutdown from `balanceR`: [[pull-3343]]\\n\\n### Next steps\\n\\n* **Conway spec** -\\n  Complete the first version of the conway formal specification.\\n* **DRep stake distribution** -\\n  Have the ledger compute the DRep stake distribution with acceptible performance.\\n* **Devnet ready** -\\n  Have the Haskell implementation of the conway era in sync with the formal specification,\\n  and integrate the changes with consensus and node.\\n  All the details might not be finalized, but the wire specification and the API should\\n  be stable so that conway can be placed on a devnet for tool builders to start integrating with.\\n* **Plutus V3** -\\n  Integrate Plutus V3 into the ledger, including a new script context which supports DReps.\\n\\n### More details\\n\\nThis quarterly report was based off of the following fortnightly ones:\\n\\n* [2023-01-05](2023-01-05-ledger)\\n* [2023-01-19](2023-01-19-ledger)\\n* [2023-02-02](2023-02-02-ledger)\\n* [2023-02-17](2023-02-17-ledger)\\n* [2023-03-03](2023-03-03-ledger)\\n* [2023-03-17](2023-03-17-ledger)\\n* [2023-03-31](2023-03-31-ledger)\\n\\n[pull-3167]: https://github.com/input-output-hk/cardano-ledger/pull/3167\\n[pull-3170]: https://github.com/input-output-hk/cardano-ledger/pull/3170\\n[pull-3172]: https://github.com/input-output-hk/cardano-ledger/pull/3172\\n[pull-3175]: https://github.com/input-output-hk/cardano-ledger/pull/3175\\n[pull-3176]: https://github.com/input-output-hk/cardano-ledger/pull/3176\\n[pull-3184]: https://github.com/input-output-hk/cardano-ledger/pull/3184\\n[pull-3195]: https://github.com/input-output-hk/cardano-ledger/pull/3195\\n[pull-3202]: https://github.com/input-output-hk/cardano-ledger/pull/3202\\n[pull-3205]: https://github.com/input-output-hk/cardano-ledger/pull/3205\\n[pull-3208]: https://github.com/input-output-hk/cardano-ledger/pull/3208\\n[pull-3209]: https://github.com/input-output-hk/cardano-ledger/pull/3209\\n[pull-3210]: https://github.com/input-output-hk/cardano-ledger/pull/3210\\n[pull-3212]: https://github.com/input-output-hk/cardano-ledger/pull/3212\\n[pull-3214]: https://github.com/input-output-hk/cardano-ledger/pull/3214\\n[pull-3215]: https://github.com/input-output-hk/cardano-ledger/pull/3215\\n[pull-3216]: https://github.com/input-output-hk/cardano-ledger/pull/3216\\n[pull-3217]: https://github.com/input-output-hk/cardano-ledger/pull/3217\\n[pull-3218]: https://github.com/input-output-hk/cardano-ledger/pull/3218\\n[pull-3219]: https://github.com/input-output-hk/cardano-ledger/pull/3219\\n[pull-3222]: https://github.com/input-output-hk/cardano-ledger/pull/3222\\n[pull-3223]: https://github.com/input-output-hk/cardano-ledger/pull/3223\\n[pull-3224]: https://github.com/input-output-hk/cardano-ledger/pull/3224\\n[pull-3225]: https://github.com/input-output-hk/cardano-ledger/pull/3225\\n[pull-3226]: https://github.com/input-output-hk/cardano-ledger/pull/3226\\n[pull-3229]: https://github.com/input-output-hk/cardano-ledger/pull/3229\\n[pull-3239]: https://github.com/input-output-hk/cardano-ledger/pull/3239\\n[pull-3241]: https://github.com/input-output-hk/cardano-ledger/pull/3241\\n[pull-3242]: https://github.com/input-output-hk/cardano-ledger/pull/3242\\n[pull-3244]: https://github.com/input-output-hk/cardano-ledger/pull/3244\\n[pull-3245]: https://github.com/input-output-hk/cardano-ledger/pull/3245\\n[pull-3248]: https://github.com/input-output-hk/cardano-ledger/pull/3248\\n[pull-3249]: https://github.com/input-output-hk/cardano-ledger/pull/3249\\n[pull-3260]: https://github.com/input-output-hk/cardano-ledger/pull/3260\\n[pull-3263]: https://github.com/input-output-hk/cardano-ledger/pull/3263\\n[pull-3264]: https://github.com/input-output-hk/cardano-ledger/pull/3264\\n[pull-3268]: https://github.com/input-output-hk/cardano-ledger/pull/3268\\n[pull-3269]: https://github.com/input-output-hk/cardano-ledger/pull/3269\\n[pull-3270]: https://github.com/input-output-hk/cardano-ledger/pull/3270\\n[pull-3274]: https://github.com/input-output-hk/cardano-ledger/pull/3274\\n[pull-3276]: https://github.com/input-output-hk/cardano-ledger/pull/3276\\n[pull-3277]: https://github.com/input-output-hk/cardano-ledger/pull/3277\\n[pull-3279]: https://github.com/input-output-hk/cardano-ledger/pull/3279\\n[pull-3282]: https://github.com/input-output-hk/cardano-ledger/pull/3282\\n[pull-3286]: https://github.com/input-output-hk/cardano-ledger/pull/3286\\n[pull-3288]: https://github.com/input-output-hk/cardano-ledger/pull/3288\\n[pull-3289]: https://github.com/input-output-hk/cardano-ledger/pull/3289\\n[pull-3290]: https://github.com/input-output-hk/cardano-ledger/pull/3290\\n[pull-3291]: https://github.com/input-output-hk/cardano-ledger/pull/3291\\n[pull-3292]: https://github.com/input-output-hk/cardano-ledger/pull/3292\\n[pull-3295]: https://github.com/input-output-hk/cardano-ledger/pull/3295\\n[pull-3296]: https://github.com/input-output-hk/cardano-ledger/pull/3296\\n[pull-3297]: https://github.com/input-output-hk/cardano-ledger/pull/3297\\n[pull-3298]: https://github.com/input-output-hk/cardano-ledger/pull/3298\\n[pull-3299]: https://github.com/input-output-hk/cardano-ledger/pull/3299\\n[pull-3300]: https://github.com/input-output-hk/cardano-ledger/pull/3300\\n[pull-3302]: https://github.com/input-output-hk/cardano-ledger/pull/3302\\n[pull-3303]: https://github.com/input-output-hk/cardano-ledger/pull/3303\\n[pull-3306]: https://github.com/input-output-hk/cardano-ledger/pull/3306\\n[pull-3307]: https://github.com/input-output-hk/cardano-ledger/pull/3307\\n[pull-3308]: https://github.com/input-output-hk/cardano-ledger/pull/3308\\n[pull-3310]: https://github.com/input-output-hk/cardano-ledger/pull/3310\\n[pull-3311]: https://github.com/input-output-hk/cardano-ledger/pull/3311\\n[pull-3316]: https://github.com/input-output-hk/cardano-ledger/pull/3316\\n[pull-3320]: https://github.com/input-output-hk/cardano-ledger/pull/3320\\n[pull-3323]: https://github.com/input-output-hk/cardano-ledger/pull/3323\\n[pull-3326]: https://github.com/input-output-hk/cardano-ledger/pull/3326\\n[pull-3327]: https://github.com/input-output-hk/cardano-ledger/pull/3327\\n[pull-3328]: https://github.com/input-output-hk/cardano-ledger/pull/3328\\n[pull-3330]: https://github.com/input-output-hk/cardano-ledger/pull/3330\\n[pull-3331]: https://github.com/input-output-hk/cardano-ledger/pull/3331\\n[pull-3332]: https://github.com/input-output-hk/cardano-ledger/pull/3332\\n[pull-3333]: https://github.com/input-output-hk/cardano-ledger/pull/3333\\n[pull-3338]: https://github.com/input-output-hk/cardano-ledger/pull/3338\\n[pull-3339]: https://github.com/input-output-hk/cardano-ledger/pull/3339\\n[pull-3341]: https://github.com/input-output-hk/cardano-ledger/pull/3341\\n[pull-3342]: https://github.com/input-output-hk/cardano-ledger/pull/3342\\n[pull-3343]: https://github.com/input-output-hk/cardano-ledger/pull/3343\\n[pull-3344]: https://github.com/input-output-hk/cardano-ledger/pull/3344\\n[pull-3345]: https://github.com/input-output-hk/cardano-ledger/pull/3345\\n[pull-3347]: https://github.com/input-output-hk/cardano-ledger/pull/3347\\n[pull-3350]: https://github.com/input-output-hk/cardano-ledger/pull/3350\\n[pull-3351]: https://github.com/input-output-hk/cardano-ledger/pull/3351\\n[pull-3352]: https://github.com/input-output-hk/cardano-ledger/pull/3352\\n[pull-3353]: https://github.com/input-output-hk/cardano-ledger/pull/3353\\n[pull-3354]: https://github.com/input-output-hk/cardano-ledger/pull/3354\\n[pull-3356]: https://github.com/input-output-hk/cardano-ledger/pull/3356\\n[pull-3357]: https://github.com/input-output-hk/cardano-ledger/pull/3357\\n[pull-3360]: https://github.com/input-output-hk/cardano-ledger/pull/3360\\n[pull-3361]: https://github.com/input-output-hk/cardano-ledger/pull/3361\\n[pull-3363]: https://github.com/input-output-hk/cardano-ledger/pull/3363\\n[pull-3364]: https://github.com/input-output-hk/cardano-ledger/pull/3364\\n\\n[pull-4349]: https://github.com/input-output-hk/ouroboros-network/pull/4349\\n\\n[pull-378]: https://github.com/input-output-hk/cardano-base/pull/378\\n[pull-376]: https://github.com/input-output-hk/cardano-base/pull/376\\n[pull-373]: https://github.com/input-output-hk/cardano-base/pull/373\\n[pull-370]: https://github.com/input-output-hk/cardano-base/pull/370\\n[pull-361]: https://github.com/input-output-hk/cardano-base/pull/361\\n\\n[pull-4976]: https://github.com/input-output-hk/cardano-node/pull/4976\\n[pull-5013]: https://github.com/input-output-hk/cardano-node/pull/5013"},{"id":"2023-01-18-consensus","metadata":{"permalink":"/cardano-updates/quarterly/2023-01-18-consensus","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/quarterly/2023-01-18-consensus.md","source":"@site/quarterly/2023-01-18-consensus.md","title":"Consensus Quarterly Update","description":"Consensus Quarterly Update","date":"2023-01-18T00:00:00.000Z","formattedDate":"January 18, 2023","tags":[{"label":"consensus","permalink":"/cardano-updates/quarterly/tags/consensus"}],"readingTime":3.205,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Quarterly Update","slug":"2023-01-18-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/quarterly/2023-04-03-ledger"},"nextItem":{"title":"Network Quarterly Update","permalink":"/cardano-updates/quarterly/2023-01-13-network"}},"content":"## Consensus Quarterly Update\\n## 2022-12 - 2023-01\\n\\n### Main achievements\\n\\n#### UTxO HD\\n\\nThe prototype is feature complete and thoroughly tested at the consensus level.\\nIn particular, we invested a lot of time in writing property-test for the\\nmempool, and other crucial new parts of the prototype. Now we are ready to run\\nintegration tests and system-level benchmarks.\\n\\n#### Genesis\\n\\nWe identified and fixed a slowdown in cross-era forecasting that was inhibiting\\nour efforts to benchmark the ChainSync Jumping prototype. This resulted in a 7%\\nspeedup in full sync times in the baseline.\\n\\nWe also started prototyping a self-contained implementation of the Genesis\\ndynamics (in particular of the parts intentionally not part of the ChainSync\\nJumping prototype) that furthered our understanding of subtleties and edge\\ncases.\\n\\n#### Support\\n\\n- We worked on designing integration of new VRF and KES crypto into consensus.\\n    - `Crypto` class was split into two parts: `Crypto` and `HeaderCrypto`.\\n    - With the Ledger team\'s help, we refactored `cardano-ledger` to use a proxy\\n      type for VRF.\\n\\n#### Conway era\\n\\n- PR went through its second review round. It is about to be merged, but it got\\n  delayed due to people\'s availability during Christmas break.\\n\\n#### Technical debt\\n\\n- We improved the capabilities of our `io-sim` library, which is key for testing\\n  and simulating Cardano components.\\n- We removed thunks from epoch translations in the ledger, which is important\\n  for reducing memory consumption of the Cardano node.\\n\\n#### Fostering collaboration\\n\\n- We added a tutorial on how to instantiate the Consensus layer to run custom\\n  ledgers. This should be a valuable resource to people looking to roll their\\n  own custom blockchain (either for commercial or research purposes).\\n- We added an overview of consensus to the [top level\\n  documentation](https://input-output-hk.github.io/ouroboros-network/) of\\n  ouroboros-network. This overview describes the consensus components and adds a\\n  hyperlinked map to the modules documentation.\\n\\n### Next steps\\n\\n#### UTxO HD\\n\\n- Evaluate the extensibility of the prototype. Moving the UTxO to disk is only\\n  the first step towards reducing the memory requirements of Cardano node, and\\n  ensuring its long term sustainability. In the future, we plan on moving other\\n  large maps, such as delegation maps. The prototype should be able to\\n  accommodate these changes without any major modifications.\\n- Start the integration with other downstream components, such as the wallet and\\n  db-sync. The idea is to identify and address any potential pain points that\\n  might arise during this integration.\\n- Run integration tests and system-level benchmarks.\\n\\n#### Genesis\\n\\n- Finish benchmarking and tuning the fast-path ChainSync Jumping prototype\\n- Expand and optimize the self-contained implementation of the Disconnect Rule\\n  (including density comparisons and the LoE)\\n- Develop documentation and smoke tests for these components.\\n- Start modifying the ChainSync Client for the LoP and LoR.\\n\\n#### Support\\n\\n- Help the Network team with diagnosing performance regression in block\\n  production.\\n\\n#### Tech debt\\n\\n- Fix property-test failures concerning iterators ([#3999][issue-3999] and\\n  [#4183][issue-4183]).\\n\\n#### Fostering collaboration\\n\\n- Finish [mapping consensus][issue-4145].\\n\\n### Risks \\n\\n#### UTxO HD\\n\\n- Moving other parts of the ledger state to disk might require a major redesign\\n  of the prototype. For instance, if it turns out that the epoch change rules\\n  require access to the *full* ledger state. If this is the case, we might\\n  accept this risk and do the redesign after the initial release of UTxO-HD.\\n- Integration with downstream clients might require more work than we\\n  anticipate.\\n- Access to the benchmarking\'s team time and resources.\\n- Benchmarking results might show significant performance degradation, which\\n  will require additional work if such performance degradation is not accepted\\n  by other stakeholders.\\n- The prototype\'s performance might not be accepted by other stakeholders. Here\\n  we need to clearly communicate that this is necessary to ensure that as the\\n  blockchain size grows, the node can operate within reasonable memory\\n  constraints.\\n\\n[issue-4183]: https://github.com/input-output-hk/ouroboros-network/issues/4183\\n[issue-3999]: https://github.com/input-output-hk/ouroboros-network/issues/3999\\n[issue-4145]: https://github.com/input-output-hk/ouroboros-network/issues/4145"},{"id":"2023-01-13-network","metadata":{"permalink":"/cardano-updates/quarterly/2023-01-13-network","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/quarterly/2023-01-13-network.md","source":"@site/quarterly/2023-01-13-network.md","title":"Network Quarterly Update","description":"Network Quarterly Update","date":"2023-01-13T00:00:00.000Z","formattedDate":"January 13, 2023","tags":[{"label":"network","permalink":"/cardano-updates/quarterly/tags/network"}],"readingTime":4.125,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Network Quarterly Update","slug":"2023-01-13-network","authors":"coot","tags":["network"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Quarterly Update","permalink":"/cardano-updates/quarterly/2023-01-18-consensus"},"nextItem":{"title":"Open-Source Update","permalink":"/cardano-updates/quarterly/2023-01-13-open-source"}},"content":"## Network Quarterly Update\\n## 2022-11 - 2023-01\\n\\n### Summary\\n\\nThe primary goal of the networking team was to focus on the single relay\\nrelease of P2P.  We fixed a number of small late bugs, and concluded QA\\n& performance testing.  Although it was discovered a regression in performance\\nof  block production when P2P is enabled, relaying with P2P performs better\\ncomparing to a non p2p.  We concluded that this is not a blocker for the Single\\nRelay Release which is planned shortly.\\n\\n[Peer sharing][pr #4019] has gone through review and final review is\\njust being done right now.  After merging it will still be disabled (hidden\\nbehind a flag) as it\'s not safe without eclipse evasion.  We started\\nimplementing light peer sharing (i.e. include inbound peers into known peer set\\nof the outbound governor).\\n\\nWe started a detailed eclipse evasion design, it will continue in the next\\nquarter.\\n\\nWe also made a major revision of package structure of the network packages.  We\\nended up with a very clean dependency graph ([pr #4155]).\\n\\nArmando Santos delivered a talk at the [ODOPIS 2022] conference on principles\\nof distributed systems in Brussels.  The slides are available [here][ODOPIS-slides].\\n\\nNeil Davies gave an invited seminar on `DeltaQ` at Universit\xe9 Catholique de\\nLouvain.\\n\\nWe also found and fixed a few of bugs:\\n\\n* a bug in keep alive mini-protocol which resulted in warm to cold transitions\\n  to be always executed through a timeout path rather than do a clean demotion\\n  ([pr #4168]).\\n\\n* fixed an assetion failure in the outbound governor ([issue #4177]) \\n\\n- we fixed DNS test failure [issue #4191]\\n\\n### Next steps\\n\\nWe will work towards the next release of P2P for block producer nodes.  This includes:\\n\\n* analysing performance regression for BP nodes when using P2P\\n* finish the work on controlling the block forger through node kernel ([pr #3800])\\n* address [issue #3907] and write a script to analyse deployment of P2P relays\\n\\nWe would like also to push forward eclipse evasion.   Although most of the work\\nhas be done already the release of `io-sim` on `Hackage` will happen in the\\nnext quarter.\\n\\nWe would also like to address [chain-sync timeout issue][issue #4244] recently\\ndiagnosed by Karl Knutsson.\\n\\nIf time permits we would also like to address some technical debt, especially:\\n\\n- [enable nothunk in diffusion tests][issue #3387]\\n- [refactor diffusion testnet simulation][issue #4085]\\n\\n### Risks\\n\\nThe performance regression for block producer with P2P needs to be investigated\\nin the near future.  This is blocker for the release of P2P on BP nodes.\\n\\n### Detailed log\\n\\n#### Contributions to Ouroboros-Network\\n\\n- We added `TraceDemoteLocalAsynchronous`, which enables notification of critical issues for SPOs\\n- We fixed `cardano-ping` compatibility with `NodeToNodeV_10` (P2P, [pr #4165])\\n- We fixed a bug in demotion peers to cold which affected P2P nodes ([commit-61058aa5c2])\\n- Karl Knutsson enhanced `SendFetchRequest` ([commit-bb1c3dddee]), open-source contribution)\\n- We turned `SizeInBytes` into a newtype.\\n- We extended `CONTRIBUTING.md`, `README.md`, added `CODE_OF_CONDUCT`.\\n- We fixed DNS test failure [issue #4191]\\n- We fixed a simulation bug found in [issue #4258]\\n- [pr #4168]\\n- [issue #4177]\\n\\n#### Contributions to Cardano-Node\\n\\n- We maintained the Single Relay Release [pr #4612], (e.g. fixing CI issues,\\n  Rebasing it when necessary, publishing packages to Cardano Haskell Packages);\\n- We enhanced `JSON` serialisation / deserialisation of `NodeToNodeVersion` and `NodeToClientVersion`;\\n\\n#### Contributions to IOSim\\n\\n- We started to use Cardano Haskell Packages for `IOSim` ([pr #48])\\n- We updated change log files\\n- We added support of `ghc-9.4` ([pr #50])\\n\\nWe also addressed the following issues in [pr #57] in order to prepare the package for publication on Hackage:\\n\\n- refactored `io-classes` timers API ([issue #46]);\\n- created a new package `si-timers` which exposes an interface using SI units\\n  and is safe on 32-bit systems ([issue #59]);\\n- added monad transformers instances for classes defined in `io-classes` ([issue #58]);\\n- created `io-classes-mtl` package which includes (experimental) instances for monad transformers;\\n- provide `MonadMonotonicTimeNSec` in `io-classes` and `MonadMonotonicTime` in `si-timers` (so that `io-classes` follow the `base` package);\\n- added  `registerCancellableDelay` in `si-timers` (which allowed us to hide fancy timer api and clean `io-classes`)\\n- added support for `js_HOST_ARCH` (the new GHC JS backend)\\n\\nNote the [pr #57] contains almost 40 commits, and was a major step forward for\\n`io-sim` ecosystem.  We also prepared a draft [pr #4281] which updates\\n`ouroboros-network`.\\n\\nOther changes for `1.0.0.0` release on Hackage:\\n\\n- Refactored test suite ([pr #47])\\n- Updated documentation, cabal files, `CONTRIBUTING`, `SECURITY` documents, etc in [pr #60], currently under review.\\n\\n[commit-61058aa5c2]: https://github.com/input-output-hk/ouroboros-network/pull/4170/commits/61058aa5c28a144d723aae183d1745552d757334\\n[commit-bb1c3dddee]: https://github.com/input-output-hk/ouroboros-network/pull/4170/commits/bb1c3dddeea78949f531c144bb4f2669eddf7f47\\n[issue #3387]: https://github.com/input-output-hk/ouroboros-network/issues/3387\\n[issue #3907]: https://github.com/input-output-hk/ouroboros-network/issues/3907\\n[issue #4085]: https://github.com/input-output-hk/ouroboros-network/issues/4085\\n[issue #4168]: https://github.com/input-output-hk/ouroboros-network/issues/4168\\n[issue #4177]: https://github.com/input-output-hk/ouroboros-network/issues/4177\\n[issue #4191]: https://github.com/input-output-hk/ouroboros-network/issues/4191\\n[issue #4244]: https://github.com/input-output-hk/ouroboros-network/issues/4244\\n[issue #4258]: https://github.com/input-output-hk/ouroboros-network/issues/4258\\n[issue #46]: https://github.com/input-output-hk/io-sim/issues/46\\n[issue #58]: https://github.com/input-output-hk/io-sim/issues/58\\n[issue #59]: https://github.com/input-output-hk/io-sim/issues/59\\n[pr #3800]: https://github.com/input-output-hk/ouroboros-network/pull/3800\\n[pr #4019]: https://github.com/input-output-hk/ouroboros-network/pull/4019\\n[pr #4155]: https://github.com/input-output-hk/ouroboros-network/pull/4155\\n[pr #4165]: https://github.com/input-output-hk/ouroboros-network/pull/4165\\n[pr #4281]: https://github.com/input-output-hk/cardano-node/pull/4281\\n[pr #4612]: https://github.com/input-output-hk/cardano-node/pull/4612\\n[pr #47]: https://github.com/input-output-hk/io-sim/pull/47\\n[pr #48]: https://github.com/input-output-hk/io-sim/pull/48\\n[pr #49]: https://github.com/input-output-hk/io-sim/pull/49\\n[pr #50]: https://github.com/input-output-hk/io-sim/pull/50\\n[pr #57]: https://github.com/input-output-hk/io-sim/pull/57\\n[pr #60]: https://github.com/input-output-hk/io-sim/pull/60\\n[ODOPIS 2022]: https://sites.uclouvain.be/OPODIS2022/armando-details.html\\n[ODOPIS-slides]: https://sites.uclouvain.be/OPODIS2022/slides/OPODIS2022-slides-Santos.pdf"},{"id":"2023-01-13-open-source","metadata":{"permalink":"/cardano-updates/quarterly/2023-01-13-open-source","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/quarterly/2023-01-13-open-source.md","source":"@site/quarterly/2023-01-13-open-source.md","title":"Open-Source Update","description":"Open Source Quarterly Update","date":"2023-01-13T00:00:00.000Z","formattedDate":"January 13, 2023","tags":[{"label":"open-source","permalink":"/cardano-updates/quarterly/tags/open-source"}],"readingTime":2.215,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Open-Source Update","slug":"2023-01-13-open-source","authors":"coot","tags":["open-source"],"hide_table_of_contents":false},"prevItem":{"title":"Network Quarterly Update","permalink":"/cardano-updates/quarterly/2023-01-13-network"},"nextItem":{"title":"Consensus Quarterly Update","permalink":"/cardano-updates/quarterly/2022-11-15-consensus"}},"content":"## Open Source Quarterly Update\\n## 2022-11 - 2023-01\\n\\n### Summary\\n\\nIn the last quarter the open-source initiative delivered a comprehensive report\\non the state of our repositories.  As part of this work stream we\\nidentified the key open-source repositories for the cardano project across all\\nthe projects  From a list of more than 500 repositories (some of which are\\nforks) we identified key repositories which constitute the core of Cardano.\\n20 of them were identified as to be transferred to the future MBO which will\\ngovern Cardano development.  Some where excluded (like [`io-sim`] and\\n[`typed-protocols`]), to be govern by IOG, since they have a much broader\\napplication than Cardano itself, and thus we think their open-source future\\nwill be better outside of the Cardano umbrella.\\n\\nChristian Taylor identified a number of ways we can improve our repositories to\\nmake them more attractive for open-source contributions by analysing each of\\nthem.  This includes adding or improving various documentation files, like\\n`CONTRIBUTING` files, adding code of conduct, improving readme files, issue\\n& pull request templates etc.  Christian also computed various interesting\\nmetrics which gives a very good insight into the development practices: e.g.\\naverage merge ratio, average number of reviews, comments and many more!  The\\npresentation is available [here][open-source-presentation].\\n\\nWe followed with work on the [Cardano Engineering Handbook][CEH].  We included\\na standard code of conduct which is now used by most important projects in the\\nCardano space.  We included `cardano-node`\'s security policy and added\\na responsible disclosure policy.  We also described how roles and\\nresponsibilities should be clarified.  This progress was made by\\na collaborative effort of the Cardano Core, Plutus and Architecture teams, and\\nit wouldn\'t be possible without Michael Peyton Jones, Arnaud Bailly, Kevin\\nHammond, Jared Corduan and Marcin Szamotulski.\\n\\nWe also improved the documentation of key repositories, by adding description,\\nimproving their `README` file & `CONTRIBUTING` files, adding code of conducts\\nfollowing the [Cardano Engineering Handbook][CEH].  This includes improvements to:\\n\\n* [`ouroboros-network`] (both `network` & `consensus`)\\n* [`cardano-ledger`]\\n* [`cardano-node`]\\n\\nAnd also\\n\\n* [`io-sim`]\\n* [`typed-protocols`]\\n* [`cardano-prelude`] (work in progress)\\n\\nThe work was carried by Marcin Szamotulski, Addie Girouard and  Jared Corduan. \\n\\n\\nIn this quarter we also identified a number of projects which can be published to\\n`Hackage` (Haskell\'s package repository) or `crate` (Rust package repository).\\nThe list contains 21 packages, 2 of which ([`hedgehog-extras`] and\\n[`quickcheck-dynamic`]) are already published on Hackage and another 5 (from\\nthe [`io-sim`] repository) are close to be published.\\n\\n\\n### Detailed log\\n\\nThe progress of the open-source project is tracked in [this project][open-source-project].\\n\\n[CEH]: https://input-output-hk.github.io/cardano-engineering-handbook/\\n[open-source-project]: https://github.com/orgs/input-output-hk/projects/60/views/1\\n[`cardano-ledger`]: https://github.com/input-output-hk/cardano-ledger\\n[`cardano-node`]: https://github.com/input-output-hk/cardano-node\\n[`cardano-prelude`]: https://github.com/input-output-hk/cardano-prelude\\n[`hedgehog-extras`]: https://hackage.haskell.org/package/hedgehog-extras\\n[`io-sim`]: https://github.com/input-output-hk/io-sim\\n[`ouroboros-network`]: https://github.com/input-output-hk/ouroboros-network\\n[`quickcheck-dynamic`]: https://hackage.haskell.org/package/quickcheck-dynamic\\n[`typed-protocols`]: https://github.com/input-output-hk/typed-protocols\\n[open-source-presentation]: https://docs.google.com/presentation/d/127IFEavlrZeeoFrVXFYWzSt0ugOkSL7isxjyM1vmMzQ"},{"id":"2022-11-15-consensus","metadata":{"permalink":"/cardano-updates/quarterly/2022-11-15-consensus","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/quarterly/2022-11-15-consensus.md","source":"@site/quarterly/2022-11-15-consensus.md","title":"Consensus Quarterly Update","description":"Consensus Quarterly Update","date":"2022-11-15T00:00:00.000Z","formattedDate":"November 15, 2022","tags":[{"label":"consensus","permalink":"/cardano-updates/quarterly/tags/consensus"}],"readingTime":3.655,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Quarterly Update","slug":"2022-11-15-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Open-Source Update","permalink":"/cardano-updates/quarterly/2023-01-13-open-source"},"nextItem":{"title":"Network Team Update","permalink":"/cardano-updates/quarterly/2022-11-09-network"}},"content":"## Consensus Quarterly Update\\n## 2022-09 - 2022-11\\n\\n### Main achievements\\n\\n#### UTxO HD\\n\\n- As a consequence of the errors observed when running distributed mempool\\n  benchmarks, we re-designed the UTxO HD mempool integration, which fixed these\\n  errors and lead to a simpler and more maintainable design.\\n\\n- We focused on increasing test coverage for the UTxO-HD prototype. In\\n  particular, we added property tests for:\\n  - Backing store (work ongoing)\\n  - Era transitions\\n\\n- The property tests we added uncovered several bugs, which is a great result\\n  given the exponential increase in the cost of finding bugs as they are closer\\n  to deployment.\\n\\n- One of the errors found by our tests required us to work on improvements in\\n  the Haskell bindings for LMDB. This work is ongoing.\\n\\n- We started working on the mempool property tests that will exercise the new\\n  code paths that UTxO HD introduced.\\n\\n- We developed, benchmarked and tested an implementation of sequences of\\n  differences based on \\"anti-diffs\\". Performance results of diff sequence\\n  operations show that we achieved a speedup of about `4x` across several\\n  scenarios. Note: this speedup is taking into account diff sequence operations\\n  only, so the consensus-wide speedup is less than `4x`.\\n\\n- We integrated the \\"anti-diff\\" prototype into the UTxO HD feature branch.\\n\\n#### Genesis\\n\\n- We wrote a simulator that demonstrates soundness of an abstract implementation\\n  of the new chain selection rule.\\n- We elaborated a draft specification for the Genesis implementation (currently\\n  awaiting feedback from other architects).\\n- We elaborated a draft specification for the ChainSync Jumping optimization. In\\n  particular, this includes a proof sketch that the latter preserves liveness\\n  and safety in all cases.\\n- With the Networking team, we co-designed the eclipse avoidance mechanism,\\n  specifically its coherence with the Genesis implementation plan\'s security\\n  and its dependence on the new ChainSync Jumping optimization.\\n- We implemented a prototype for ChainSync Jumping. Initial benchmarks showed a\\n  performance degradation wrt the baseline. Our optimization attempts so far\\n  have brought the performance closer to the baseline, but not yet to parity.\\n\\n#### Conway era\\n\\n- We did most of the heavy lifting required to integrate the Conway era into the\\n  Consensus layer.\\n\\n#### Technical debt\\n\\n- We started working on enabling CI nightly tests, which revealed several test\\n  failures due to thunks being found it data structures used by the ledger and\\n  consensus. We made a lot of progress fixing those thunk errors, but some\\n  errors still remain.\\n\\n- We elaborated a `db-analyser` benchmark for the ledger operations. This led us\\n  to the identification of high processing time at epoch boundaries, and we\\n  could not observe any performance degradation that can be attributed to era\\n  changes.\\n\\n- We fixed a source of flakiness in the ChainDB QSM test.\\n\\n- We clarified a common source of confusion around VRF tie-breaking and\\n  cross-era chain selection.\\n\\n- We fixed a bug in the maximum-allowed ledger major protocol version.\\n\\n#### Fostering collaboration\\n\\n- We spent time making `cardano-updates` the central source of information for\\n  the core teams stakeholders.\\n- We went through the Galois gap analysis and extracted actionable points to\\n  take on next.\\n- Bart and Yogesh continued with their onboarding and stated making substantial\\n  contributions to consensus.\\n\\n### Next steps\\n\\n#### UTxO HD\\n\\n- Finish the mempool property tests.\\n- Benchmark the latest version of the prototype.\\n- Elaborate a document that describes new integration test scenarios and pass it\\n  to the SDET team.\\n- Bring query UTxO by address command performance on par with the baseline\\n  version.\\n\\n#### Genesis\\n\\n- Receive and incorporate Duncan\'s feedback on the first draft specification for\\n  the Genesis implementation.\\n- Begin prototyping the first genesis implementation, unless the first draft\\n  needs major changes.\\n- Draft a second revision of the Genesis report.\\n- Review the second revision with a wider audience, which includes at least\\n  Alexander Russell. That feedback will drive a third and hopefully final\\n  revision.\\n- Investigate how to mitigate the ~30% slowdown we have observed so far in the\\n  ChainSync jumping prototype, and try to mitigate it. In particular, we might\\n  need to optimize the existing BlockFetch logic.\\n\\n#### Tech debt\\n\\n- Enabling nightly CI tests.\\n\\n#### Fostering collaboration\\n\\n- Merge the tutorial document Galois wrote; requires CI integration.\\n- Come up with our own documentation improvements, many of which were suggested\\n  in the Galois gap analysis.\\n- Try to hire a new team member."},{"id":"2022-11-09-network","metadata":{"permalink":"/cardano-updates/quarterly/2022-11-09-network","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/quarterly/2022-11-09-network.md","source":"@site/quarterly/2022-11-09-network.md","title":"Network Team Update","description":"Network Quarterly Update","date":"2022-11-09T00:00:00.000Z","formattedDate":"November 9, 2022","tags":[{"label":"network","permalink":"/cardano-updates/quarterly/tags/network"}],"readingTime":3.87,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Network Team Update","slug":"2022-11-09-network","authors":"coot","tags":["network"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Quarterly Update","permalink":"/cardano-updates/quarterly/2022-11-15-consensus"},"nextItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/quarterly/2022-11-07-ledger"}},"content":"## Network Quarterly Update\\n## 2022-09 - 2022-11\\n\\n### Summary of most important improvements\\n\\nDuring this quarter the networking team delivered low level specification of\\npeer sharing & eclipse evasion.  We held a session with the consensus & the\\nscientists; we got a positive feedback on the design.\\n\\nFurther we focused on implementation of peer sharing.  We produced a [detail\\ndesign][peer-sharing-design] and an [early implementation][peer-sharing-pr].\\n\\nWe prepared the _P2P Single Relay Release_ (`cardano-node-1.35.5`).  It\\nincludes over [130 patches][p2p-release] of network stack improvements over the\\nprevious version `1.35.4`, which were accomplished over a longer period of\\ntime.  Among them are both bug fixes and UX improvements for stake pool\\noperators like simplified format of the [topology file][topology-file], or\\nimprovements in the logged messages:\\n\\n* [tracing of early consensus exceptions][consensus-startup-trace]\\n* [tracing of demotion of local root peers][demotion-trace] (traced with\\n  `Warning` severity), the trace is called `TraceDemoteLocalAsynchronous`, in\\n  `json` format it is encoded as `DemoteLocalAsynchronous`.  For an SPO\\n  tracking these demotion is vital (such demotion could indicate that a block\\n  producer is no longer connected to its relays or vice versa)\\n\\nWe also provide better integration with [systemd][socket-activation] (socket\\nactivation improvements) or improvements in the networking stack:\\n\\n* [exit policies][exit-policy],\\n* [peer metrics improvements][peer-metrics],\\n* [DNS TTL][dns-ttl] improvements (which make it harder to misconfigure the\\n  system, an issue discovered by the performance & monitoring team),\\n* do not trigger inbound idle timeout for `node-to-client` connections ([pr\\n  #3844][idle-timeout]), an issue reported to us by Matthias Benkort from\\n  Cardano Foundation.\\n\\nDuncan has been making progress with the input endorsers demo. His simulation\\nprovides a useful animated visualisation and live quantification of behaviour\\nof the modeled design.\\n\\nWe also improved our e2e diffusion simulation by implementing header-body\\nsplit, similar to what the real implementation does.\\n\\nWe also made some advances towards our future goals of P2P release for block\\nproducer nodes ([pr #3800][pr-3800] - in review) & for Daedalus users\\n([pr #3690][pr-3690] - merged).\\n\\n### Detailed log\\n\\n* We expanded diffusion simulation with block-fetch protocol bringing it closer\\n  to the production system.\\n\\n* We addressed some additional technical depth in diffusion simulation\\n\\n* We slightly improved documentation & CI of io-sim and typed-protocols\\n  repositories for open-source contributors.\\n\\n* We closed a number of issues towards publishing io-sim on Hackage (only two\\n  essential issues are left open).\\n\\n* We pushed a branch of typed-protocols which captures one of the developer UX\\n  problems in the API which we need to solve.\\n\\n* We identified and fixed an issue related to systemd sockets.\\n\\n* We identified and fixed an issue in consensus initialisation not giving\\n  feedback on early errors.\\n\\n* We deployed RT View, identified a number of issues which were communicated to\\n  the performance & monitoring team.\\n\\n* We finished high level & detailed design of peer sharing, very early\\n  implementation of peer sharing is done (note that peer sharing cannot be\\n  safely deployed without eclipse evasion & genesis).\\n\\n* We finished high level design of eclipse evasion, and started working on\\n  a detailed design.\\n\\n* We were assigned the role of release engineer for 1.35.5 release (the P2P\\n  single relay release); we prepared a cardano-node for 1.35.5 release which\\n  contains more than 130 patches of just network stack improvements done over\\n  last few months.\\n\\n* We diagnosed and fixed an tricky bug in the peer state actions (a component\\n  which sits between outbound governor and connection manager). That bug was\\n  introduced earlier this year and never released. It was caught by the QA\\n  testing framework. We expanded our diffusion simulation to cover such case and\\n  also mitigated a chance for reintroducing such a bug in future.\\n\\n* We identified and quite likely mitigated a misconfiguration in the\\n  benchmarking cluster (next benchmarking run will confirm our hypothesis).\\n\\n* We simplified the format of p2p topology file, we got positive feedback from\\n  SPOs.\\n\\n* We raised severities of some of the logging messages, which is an important\\n  improvement for SPOs, exchanges and other users of the system.\\n\\n* We worked on input endorsers simulation which gives both animated and\\n  quantified live feedback on network operation, using a simplified model of\\n  a TCP/IP network. \\n\\n## Next quarter\\n\\n* Release the Single Relay P2P Release `1.35.5`.\\n\\n* Carry on with Peer Sharing (review, testing).\\n\\n* Deliver a talk at [Conference on Principles of Distributed Systems 2022][OPODIS2022] in Brussels, Belgium.\\n\\n* Present Detailed Design of Eclipse Evasion and start implementation phase.\\n\\n* Work on P2P Block Producer release.\\n\\n* Carry on with publishing of `io-sim` on `Hackage`.\\n\\n[OPODIS2022]: https://sites.uclouvain.be/OPODIS2022/ \\n[peer-sharing-design]: https://github.com/input-output-hk/ouroboros-network/wiki/Peer-Sharing-Implementation-Plan\\n[peer-sharing-pr]: https://github.com/input-output-hk/ouroboros-network/pull/4019\\n[p2p-release]: https://github.com/input-output-hk/ouroboros-network/pull/4120\\n[exit-policy]: https://github.com/input-output-hk/ouroboros-network/pull/3785\\n[peer-metrics]: https://github.com/input-output-hk/ouroboros-network/pull/3915\\n[socket-activation]: https://github.com/input-output-hk/ouroboros-network/pull/3979\\n[topology-file]: https://github.com/input-output-hk/cardano-node/pull/4563\\n[dns-ttl]: https://github.com/input-output-hk/ouroboros-network/pull/4106\\n[consensus-startup-trace]: https://github.com/input-output-hk/ouroboros-network/pull/4015\\n[demotion-trace]: https://github.com/input-output-hk/ouroboros-network/pull/4127\\n[idle-timeout]: https://github.com/input-output-hk/ouroboros-network/pull/3844\\n[pr-3800]: https://github.com/input-output-hk/ouroboros-network/pull/3800\\n[pr-3690]: https://github.com/input-output-hk/ouroboros-network/issues/3968"},{"id":"2022-11-07-ledger","metadata":{"permalink":"/cardano-updates/quarterly/2022-11-07-ledger","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/quarterly/2022-11-07-ledger.md","source":"@site/quarterly/2022-11-07-ledger.md","title":"Ledger Team Update","description":"Ledger Quarterly Update","date":"2022-11-07T00:00:00.000Z","formattedDate":"November 7, 2022","tags":[{"label":"ledger","permalink":"/cardano-updates/quarterly/tags/ledger"}],"readingTime":1.255,"hasTruncateMarker":false,"authors":[{"name":"Jared Corduan","title":"Ledger Team Lead","url":"https://github.com/JaredCorduan","imageURL":"https://github.com/JaredCorduan.png","key":"JaredCorduan"}],"frontMatter":{"title":"Ledger Team Update","slug":"2022-11-07-ledger","authors":"JaredCorduan","tags":["ledger"],"hide_table_of_contents":false},"prevItem":{"title":"Network Team Update","permalink":"/cardano-updates/quarterly/2022-11-09-network"},"nextItem":{"title":"Node API & CLI Team Update","permalink":"/cardano-updates/quarterly/2022-10-07-node-cli-api"}},"content":"## Ledger Quarterly Update\\n## 2022-09 - 2022-11-04\\n\\n* We finished a minimal ledger era capable of master key rotation.\\n  This will be re-purposed our upcoming work.\\n* We have the humble beginnings of a proper ledger API.\\n* We improved the problematic cost model serialization\\n  (recall the song and dance about updating the cost model one epoch after the hard fork).\\n* We have added benchmarks for problematic areas.\\n* Massive repository restructure and cleanup.\\n  * Unified and consistent variable name schemes (not completely finished, but nearly there).\\n  * Massive reduction in type constraints, which causes a lot of developer friction,\\n    in our code and also downstream.\\n  * More organized module structures.\\n  * Improved generators for our property tests.\\n  * We removed our dependency on cardano-prelude.\\n* The formal ledger model has come a long way.\\n  * We created a fork of Agda that provides some meta-programming support for the ledger rules.\\n  * We have a large amount of the basic UTxO support in the model.\\n  * We can generate a good looking PDF from the model.\\n  * We can produce Haskell from the model.\\n  * We have a nice finite set theory library that we can use for many of the ledger rules.\\n  * We have nix support for the model.\\n\\n## Next steps\\n\\n  * Individual tracking of deposits. [[issue-3113]]\\n  * Versioned CBOR encoders/decoders. [[issue-3014]]\\n  * New ledger era transaction body (and the surround work associated with it).\\n  * Designs for the next ledger era.\\n\\n[issue-3113]: https://github.com/input-output-hk/cardano-ledger/issues/3113\\n[issue-3014]: https://github.com/input-output-hk/cardano-ledger/issues/3014"},{"id":"2022-10-07-node-cli-api","metadata":{"permalink":"/cardano-updates/quarterly/2022-10-07-node-cli-api","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/quarterly/2022-11-07-nod-api-cli.md","source":"@site/quarterly/2022-11-07-nod-api-cli.md","title":"Node API & CLI Team Update","description":"Node-Api-Cli Quarterly Update","date":"2022-11-07T00:00:00.000Z","formattedDate":"November 7, 2022","tags":[{"label":"cli-api-quarterly","permalink":"/cardano-updates/quarterly/tags/cli-api-quarterly"}],"readingTime":1.355,"hasTruncateMarker":false,"authors":[{"name":"Jordan Millar","title":"Node Team Lead","url":"https://github.com/Jimbo4350","imageURL":"https://github.com/Jimbo4350.png","key":"Jimbo4350"}],"frontMatter":{"title":"Node API & CLI Team Update","slug":"2022-10-07-node-cli-api","authors":"Jimbo4350","tags":["cli-api-quarterly"],"hide_table_of_contents":false},"prevItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/quarterly/2022-11-07-ledger"}},"content":"## Node-Api-Cli Quarterly Update\\n## 2022-09 - 2022-11-04\\n\\n- Various improvements to tests/CI/GHC 9.2.4 preparations/upgrade to cabal-3.8.1.0\\n- Major clean up of stale iusses + PRs.\\n- Implementation of stale-bot to mitigate against a proliferation of outdated issues and PRs\\n- cardano-api refactoring with the aim of exposing more user friendly functions, particularly concerning transaction construction and querying the node.\\n- cardano-cli refactoring with the aim of moving reusable functions to cardano-api. We have made strides here and have managed to improve the interface of transaction construction and validation.\\n- General documentation updates and improvements\\n- Addition of tx-mempool command which allows users to:\\n  - Query the node about the current mempool\'s capacity and sizes\\n  - Request the next transaction from the mempool\'s current list\\n  - Query if a particular transaction exists in the mempool\\n-  Initial refactoring of cardano-testnet\\n\\nNext quarter\\n\\n- cardano-api\\n  - Working with Konstantinos and his team to make cardano-api better for dapp developers - we have a google doc for this, I can send it to you privately.\\n- cardano-testnet\\n  - Working with Marc Fontaine to create an easy to use executable to deploy testnets locally - https://github.com/input-output-hk/cardano-node/issues/4598\\n- Serenity\\n  - Continued refactoring of cardano-api and cardano-cli, with the particular focus on extracting re-usable components of cardano-cli and moving them to cardano-api. This is harder to define but will manifest in stuff moving from cardano-cli to cardano-api and is tied in to the cardano-api work specified above.\\n- General bug fixing and smaller feature requests for the api/cli that are always coming in. Robert is primarily handling this at the moment as he is relatively new."}]}')}}]);