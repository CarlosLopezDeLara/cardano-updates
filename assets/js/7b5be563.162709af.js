"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[3287],{4906:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"2022-10-28-network","metadata":{"permalink":"/cardano-updates/2022-10-28-network","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-10-28-network.md","source":"@site/blog/2022-10-28-network.md","title":"Network Team Update","description":"P2P Network Stack","date":"2022-10-28T00:00:00.000Z","formattedDate":"October 28, 2022","tags":[{"label":"network","permalink":"/cardano-updates/tags/network"}],"readingTime":2.63,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Network Team Update","slug":"2022-10-28-network","authors":"coot","tags":["network"],"hide_table_of_contents":false},"nextItem":{"title":"SRE Team Update","permalink":"/cardano-updates/2022-08-12-sre"}},"content":"## P2P Network Stack\\n\\nDuring the past two weeks the team focused on p2p single relay release and peer\\nsharing.  We found and fixed an important bug recently introduced in one of the\\ncomponents of p2p networking stack (fortunately never released).  Together with\\na fix, we designed a unit test diffusion simulation as well as quickcheck\\nproperty test (both could reproduce it). We also changed the code in a way that\\nif such a bug is reintroduced in the future, it will be obvious to diagnose.\\n\\nInitial benchmarking run of the P2P code was executed.  The results where\\nunlike what we see on the mainnet.  We found a possible misconfiguration of the\\ncluster (caused by 0 TTL on domain names), which could be the direct cause of\\nit.  We wrote a PR which rules out such misconfiguration.  We are awaiting on\\nthe next benchmarking results.\\n\\nWe also started working on P2P single relay release.  The PR\\n[ouroboros-network#4120](https://github.com/input-output-hk/ouroboros-network/pull/4120)\\nincludes _108_ patches cherry-picked from the `master` branch.  We started\\nworking toward integration these changes against the release branch of\\n`cardano-node`.  Early next week we ought to be able to have an early version\\nof `cardano-node` with _non experimental P2P support_!\\n\\nFor more detailed release plan please see [P2P - Single\\nRelay](https://github.com/input-output-hk/ouroboros-network/issues/3888)\\nissue.\\n\\n## Consensus\\n\\nWe identified and fixed missing error reporting in consensus\\ninitialisation phase.\\n\\n## Cardano Node\\n\\nWe also made changes in `cardano-node` in order to give better experience for\\nnode operators.  This includes updating severities of some of the traces as\\nwell as implementing new format of the p2p topology file.\\n\\n## Peer Sharing\\n\\nWe continued working on implementation of peer sharing.  We have an early\\nimplementation which will be reviewed and analysed in next weeks.  We started\\nworking on `cardano-node` integration.  We need\\n[PR #4392](https://github.com/input-output-hk/cardano-node/pull/4392) to be merged\\nbefore such integration will be able to land in `cardano-node`, although this\\nis _not blocking_ us currently.\\n\\n## Eclipse Evasion\\n\\nWe held a session which included Alexander Russel, Sandro Coretti-Drayton and\\nNick Frisby from the consensus team.  We discussed high lever design of the\\neclipse evasion scheme, which is important for the design and implementation of\\n`ouroboros-genesis`.  We got a positive feedback from the researchers.\\n\\n## IO-Sim\\n\\nIn this period we made little progress towards releasing `IO-Sim` on Hackage.\\nA single [PR](https://github.com/input-output-hk/io-sim/pull/32) which added\\na few missing instances of the `STM` monad.\\n\\n## Open Source\\n\\nWe made sure the CI runs for PRs which comes from forks (which is important to\\naccept contributions from 3rd parties).\\n\\n## Mithril Cardano Integration\\n\\nWe held initial discussions with Arnaud Bailly about possible path to integrate\\nmithril to `cardano-node` and take advantage of the `ouroboros-network`\\ndiffusion layer.\\n\\n# Additional information\\n\\n## P2P Single Relay Release\\n\\nThe bug was caused by a blocking action which caused locked hot peers of the\\noutbound governor, even if the bearer errored.  The fixed and tests where implemented in:\\n\\n* [ouroboros-network#4067](https://github.com/input-output-hk/ouroboros-network/pull/4067)\\n* [ouroboros-network#4086](https://github.com/input-output-hk/ouroboros-network/pull/4086)\\n\\nThe DNS TTL issue was solved in:\\n\\n* [ouroboros-network#4106](https://github.com/input-output-hk/ouroboros-network/pull/4106)\\n\\n## Consensus\\n\\nThe early error reporting of consensus was addressed in\\n\\n* [ouroboros-network#4015](https://github.com/input-output-hk/ouroboros-network/pull/4015)\\n\\n## Cardano Node\\n\\nThe new topology format is in review:\\n\\n* [cardano-node#4563](https://github.com/input-output-hk/cardano-node/pull/4563)\\n\\nTracing improvements:\\n\\n* [cardano-node#4561](https://github.com/input-output-hk/cardano-node/pull/4561)\\n\\n## Peer Sharing\\n\\n* [ouroboros-network#4019](https://github.com/input-output-hk/ouroboros-network/pull/4019)"},{"id":"2022-08-12-sre","metadata":{"permalink":"/cardano-updates/2022-08-12-sre","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-10-28-sre.md","source":"@site/blog/2022-10-28-sre.md","title":"SRE Team Update","description":"The SRE team is heavily working on the Equinix Metal migration, replacing Hydra","date":"2022-10-28T00:00:00.000Z","formattedDate":"October 28, 2022","tags":[{"label":"sre","permalink":"/cardano-updates/tags/sre"}],"readingTime":3.02,"hasTruncateMarker":false,"authors":[{"name":"Michael Fellinger","title":"SRE Team Lead","url":"https://github.com/manveru","imageURL":"https://github.com/manveru.png","key":"manveru"}],"frontMatter":{"title":"SRE Team Update","slug":"2022-08-12-sre","authors":"manveru","tags":["sre"],"hide_table_of_contents":false},"prevItem":{"title":"Network Team Update","permalink":"/cardano-updates/2022-10-28-network"},"nextItem":{"title":"Crypto Team Update","permalink":"/cardano-updates/2022-10-27-crypto"}},"content":"The SRE team is heavily working on the Equinix Metal migration, replacing Hydra\\nwith Cicero, and a new version of Spongix.\\n\\n# Lower level summary\\n\\n## OpenZiti\\n\\n- Work is ongoing on our OpenZiti integration into Bitte in [[bitte-zt]].\\n- CI-World deployment of Darwin CI Ziti service in [[ci-world-commit-d40f4d]].\\n- Multiple issues filed, and a lot of discussion with the OpenZiti developers,\\n  we\'re making pretty rapid progress thanks to them.\\n- Work on getting Equinix baremetal machines integrated into AWS World Bitte\\n  clusters utilizing a Ziti ZTNA network overlay to bridge the networking of\\n  the two environments and get IAM extension to Equinix machine for Nomad\\n  client onboarding.\\n- A Nix Flake for most of our OpenZiti dependencies including the Console,\\n  Controller, Edge Tunnel, and Router is now at [[openziti-bins]].\\n- The Flake also includes a WiP NixOS modules for these components.\\n- Tested Ziti Desktop Edge official app for Darwin x86_64 w/ GUI -- works with\\n  no issues seen so far\\n- Moved the console to traefik routing service (`zac.$DOMAIN`) and\\n  controller/edge router stay at `zt.$DOMAIN`, but have registered consul\\n  services\\n\\n## Cicero & Tullia Integrations\\n\\n- Added webhook for [[haskell.nix]].\\n- Finished Cicero CI action for [[cardano-addresses-pull-205]].\\n- Fixed cardano-prelude cicero action in [[cardano-prelude-pull-176]].\\n- Fixed the `abcird-stdlib/publish` action [[abcirdc-pull-104]]\\n- fix error on vm-bigdisk flake configs [[cicero-pull-66]].\\n- Helped with Cicero actions and answered questions for [[plutus]]\\n  [[cardano-prelude]], and [[abcirdc]].\\n- Merged [[cardano-base-pull-323]] for Tullia on cardano-base.\\n- Merged Cicero action in [[cardano-ogmios-pull-5]].\\n- Opened [[cardano-explorer-app-pull-427]] to add Tullia and Cicero.\\n- Opened [[cardano-ledger-pull-3097]] to add Cicero CI action.\\n- Opened [[cardano-node-pull-4489]] to add Tullia and Cicero, including\\n  OS-agnostic jobs.\\n- Opened [[ouroboros-network-pull-4108]] to add Cicero action.\\n- Reviewed [[plutus-pull-4918]] and helped test it.\\n- Update Tullia in [[abcirdc-pull-97]] to build if a tag is given.\\n\\n## Cicero & Tullia Features\\n\\n- Improvements to Tullia task aggregation to make [[cardano-addresses]] build\\n  correctly.\\n- Better tullia CUE lib default for tags [[tullia-commit-4df3c5d]].\\n- Put `cache.nixos.org` back in `cache.iog.io`\'s upstreams. This is now\\n  considered a public cache again, and without it some Cicero evaluations had\\n  to build huge packages.\\n- Started working on a flake-parts module for Tullia.\\n- Started working on cutting down Tullia task build time by putting facts in\\n  JSON files.\\n- Fixed running into kernel arg limit by reading tullia\'s DAG from a file\\n- Merged [[tullia-pull-9]] that fixes several issues related to error reporting.\\n  and escaping.\\n- Added Mac builders in Cicero on CI-World.\\n- Started work on Tullia invocation caching.\\n\\n## Spongix\\n\\n- A lot of progress on an SQlite backed version of Spongix, it already supports\\n  the full HTTP binary cache protocol but still lacks comprehensive testing and\\n  some tuning, as well as recursive lookups.\\n- First steps in the implementation of the `nix-daemon` `ssh-ng` protocol so\\n  Spongix can be used via SSH and we can get rid of basic auth.\\n\\n## Bugs\\n\\n- Discovered Cicero bug where Nomad reschedules cause the Github commit status\\n  to get stuck in `pending`\\n- Discovered Cicero race condition bug around concurrent transactions for\\n  codependent actions.\\n- Fixed tullia task order bug in [[cardano-addresses]]\\n- Diagnose Cicero action not triggered in [[abcirdc]]\\n- Fixed meta/description of the Tullia package in [[tullia-pull-7]]\\n- Add Vault token loop alerts in [[bitte-cells-pull-40]]\\n- Ongoing investigation on recurring Patroni and nomad-follower issues related\\n  to token rotation.\\n\\n[abcirdc]: https://github.com/input-output-hk/abcirdc\\n[abcirdc-pull-104]: https://github.com/input-output-hk/abcirdc/pull/104\\n[abcirdc-pull-97]: https://github.com/input-output-hk/abcirdc/pull/97\\n[bitte-cells-pull-40]: https://github.com/input-output-hk/bitte-cells/pull/40\\n[bitte-zt]: https://github.com/input-output-hk/bitte/compare/zt\\n[cardano-addresses]: https://github.com/input-output-hk/cardano-addresses\\n[cardano-addresses-pull-205]: https://github.com/input-output-hk/cardano-addresses/pull/205\\n[cardano-base-pull-323]: https://github.com/input-output-hk/cardano-base/pull/323\\n[cardano-explorer-app-pull-427]: https://github.com/input-output-hk/cardano-explorer-app/pull/427\\n[cardano-ledger-pull-3097]: https://github.com/input-output-hk/cardano-ledger/pull/3097\\n[cardano-node-pull-4489]: https://github.com/input-output-hk/cardano-node/pull/4489\\n[cardano-ogmios-pull-5]: https://github.com/input-output-hk/cardano-ogmios/pull/5\\n[cardano-prelude]: https://github.com/input-output-hk/cardano-prelude\\n[cardano-prelude-pull-176]: https://github.com/input-output-hk/cardano-prelude/pull/176#issuecomment-1280947946\\n[cicero-pull-66]: https://github.com/input-output-hk/cicero/pull/66\\n[ci-world-commit-d40f4d]: https://github.com/input-output-hk/ci-world/commit/d40f4d19187a2128b6f0d63bde7e3f9a33071994\\n[haskell.nix]: https://github.com/input-output-hk/haskell.nix\\n[openziti-bins]: https://github.com/johnalotoski/openziti-bins\\n[ouroboros-network-pull-4108]: https://github.com/input-output-hk/ouroboros-network/pull/4108\\n[plutus]: https://github.com/input-output-hk/plutus\\n[plutus-pull-4918]: https://github.com/input-output-hk/plutus/pull/4918\\n[tullia-commit-4df3c5d]: https://github.com/input-output-hk/tullia/commit/4df3c5d956f1b062b950643da12768ae71acf245\\n[tullia-pull-7]: https://github.com/input-output-hk/tullia/pull/7\\n[tullia-pull-9]: https://github.com/input-output-hk/tullia/pull/9"},{"id":"2022-10-27-crypto","metadata":{"permalink":"/cardano-updates/2022-10-27-crypto","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-10-27-crypto.md","source":"@site/blog/2022-10-27-crypto.md","title":"Crypto Team Update","description":"The crypto team is primarily focusing in enabling SECP primitives, and preparing the KES agent. We are close to","date":"2022-10-27T00:00:00.000Z","formattedDate":"October 27, 2022","tags":[{"label":"crypto","permalink":"/cardano-updates/tags/crypto"}],"readingTime":1.075,"hasTruncateMarker":false,"authors":[{"name":"I\xf1igo Querejeta Azurmendi","title":"Cardano Lead Cryptography Engineer","url":"https://github.com/iquerejeta","imageURL":"https://github.com/iquerejeta.png","key":"iquerejeta"}],"frontMatter":{"title":"Crypto Team Update","slug":"2022-10-27-crypto","authors":"iquerejeta","tags":["crypto"],"hide_table_of_contents":false},"prevItem":{"title":"SRE Team Update","permalink":"/cardano-updates/2022-08-12-sre"},"nextItem":{"title":"Hydra Team Update","permalink":"/cardano-updates/2022-10-21-hydra"}},"content":"The crypto team is primarily focusing in enabling SECP primitives, and preparing the KES agent. We are close to\\nmeeting the [acceptance criteria](https://github.com/input-output-hk/cardano-base/issues/315) in cardano-base,\\nwhich lacks some editorial comments on the style of dQuandrant\'s PR, the inclusion of one additional test, and\\nwe are good to mark it as done. For the KES agent, we are still iterating over the best design of the solution,\\nbut also progressing on the implementation.\\n\\n# Low level overview\\n## SECP built-ins\\n* (missed last two weeks update) Audit was succesfully completed by bCryptic, and some minor changes where addressed in [PR 313](https://github.com/input-output-hk/cardano-base/pull/313)\\n* CIP-0049 was addressed in the editors meeting, and [PR 250](https://github.com/cardano-foundation/CIPs/pull/250) was merged\\n* The unit-tests [PR 320](https://github.com/input-output-hk/cardano-base/pull/320) is opened. Some editorial concerns still need to be addressed, and an additional (negative) test has been requested for addition.\\n\\n## KES agent\\n* We were working in investigating how to send OpCerts to KES agents, but turns out to be not necessary. OpCerts can be stored on-disk, so the agent does not need to be aware of them.\\n* We are redesigning the architecture. Instead of connecting the control server to the agent, and then the latter to the node, we are directly connecting the control server to the node, and the latter to the agent(s)."},{"id":"2022-10-21-hydra","metadata":{"permalink":"/cardano-updates/2022-10-21-hydra","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-10-21-hydra.md","source":"@site/blog/2022-10-21-hydra.md","title":"Hydra Team Update","description":"This week, the hydra team reviewed and addressed several open comments on the","date":"2022-10-21T00:00:00.000Z","formattedDate":"October 21, 2022","tags":[{"label":"hydra","permalink":"/cardano-updates/tags/hydra"}],"readingTime":0.95,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Hydra Team Lead","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"Hydra Team Update","slug":"2022-10-21-hydra","authors":"ch1bo","tags":["hydra"],"hide_table_of_contents":false},"prevItem":{"title":"Crypto Team Update","permalink":"/cardano-updates/2022-10-27-crypto"},"nextItem":{"title":"Consensus Team Update","permalink":"/cardano-updates/2022-10-18-consensus"}},"content":"This week, the hydra team reviewed and addressed several open comments on the\\nnew HeadV1 specification, completing a list the of identified gaps between\\nspecification and implementation while doing so. In the wake of the recent\\ndemonstration of SundaeSwap running their DEX in a Hydra Head, they met with\\nthem to capture feature ideas & incorporate their feedback on the roadmap, as\\nwell as potential research avenues.\\n\\n## What did the team achieve this week\\n\\n- Had the monthly review meeting, a bit earlier than expected: <https://input-output.atlassian.net/wiki/spaces/HYDRA/pages/3650813953/Monthly+report+-+October+2022>\\n- Reviewed and addressed several open comments on HeadV1 specification.\\n- Completed the list of identified gaps between specification and implementation [#452](https://github.com/input-output-hk/hydra-poc/issues/452)\\n- Had two meetings with SundaeSwap to incorporate their feedback (on research and on the roadmap).\\n- Some small fixes on TUI and our docker images. [#538](https://github.com/input-output-hk/hydra-poc/issues/538) [#562](https://github.com/input-output-hk/hydra-poc/pull/562)\\n- Met with the internal audit team and clarified scope.\\n\\n## What are the goals of next week\\n\\n- Complete the last two items required for a version `0.8.0`.\\n- Cut the next release, version `0.8.0`\\n- Get backup/recovery [#187](https://github.com/input-output-hk/hydra-poc/issues/187) done with proper event sourcing (ADR18)\\n- Have the CI build macos artifacts"},{"id":"2022-10-18-consensus","metadata":{"permalink":"/cardano-updates/2022-10-18-consensus","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-10-18-consensus.md","source":"@site/blog/2022-10-18-consensus.md","title":"Consensus Team Update","description":"During the past two weeks, the consensus team worked on adding property test for","date":"2022-10-18T00:00:00.000Z","formattedDate":"October 18, 2022","tags":[{"label":"consensus","permalink":"/cardano-updates/tags/consensus"}],"readingTime":3.23,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Team Update","slug":"2022-10-18-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Hydra Team Update","permalink":"/cardano-updates/2022-10-21-hydra"},"nextItem":{"title":"Hydra Team Update","permalink":"/cardano-updates/2022-10-14-hydra"}},"content":"During the past two weeks, the consensus team worked on adding property test for\\ndifferent aspects of the UTxO HD prototype: era transitions, mempool, and\\nbacking store. Thanks to these tests we were able to uncover a bug in the\\nprototype. On the Genesis front, we benchmarked a different version of the\\nChainSync jumping prototype to try to improve its performance, but this did not\\nresult in any noticeable speedup.\\n\\n# High-level status report\\n\\n- Finish the UTxO HD prototype: on track.\\n  - We focused on increasing test coverage for the UTxO-HD prototype:\\n    - We started implementing Cadano-eras transition property-tests.\\n    - We started implementing state-machine property-tests for the mempool.\\n    - We merged the mempool rewrite.\\n    - We started working on state-machine tests for the backing store. This\\n      uncovered a bug in the range-read implementation of the LMDB backing\\n      store.\\n- Genesis: on track.\\n  - We benchmarked a version of the Genesis ChainSync Jumping prototype that\\n    spreads out the ChainSync updates over a longer period of time. This did not\\n    result in any noticeable speedup.\\n  - We investigated the overhead introduced by non-ChainSync components, but no\\n    conclusions could be drawn from the benchmarks we ran.\\n\\n# Workstreams\\n\\n## Finish the UTxO HD prototype\\n\\nDuring the past two weeks, we focused on increasing test coverage for the\\nUTxO-HD prototype. We also merged the [mempool\\nrewrite](https://github.com/input-output-hk/ouroboros-network/pull/4049).\\n\\n### Era transition property tests\\n\\nWe started implementing [Cardano era transition property\\ntests](https://github.com/input-output-hk/ouroboros-network/issues/4043),\\nwhich are needed for making sure that the ledger tables get updated in the\\nright way when we move from one era to the next. There are at the moment two\\nimportant transitions.\\n- Byron to Shelley: where all the UTxO is transferred from in-memory Byron\\n  state (which has no tables) to the ledger tables of the Shelley state.\\n- Shelley to Allegra: where the AVVM addresses must be deleted.\\n\\nWe have tests for the Byron to Shelley transitions. We are working on adding\\nthe remaining ones.\\n\\n### Mempool state-machine tests\\n\\nWe started implementing [state-machine property tests for the\\nmempool](https://github.com/input-output-hk/ouroboros-network/issues/4044).\\nThe mempool is currently tested via pure property tests, and use a ledger\\nstate without tables. With the introduction of UTxO HD, testing the concurrent\\nbehavior of the mempool became of crucial importance (eg now we have to\\nacquire locks to flush the backing store). In addition, we need to test a\\nledger state with tables. These needs led to the creation of a new set of\\nproperty tests. In particular we aim to run parallel state-machine tests that\\nexercise the mempool in a way similar to how the node would make use of it.\\n\\n### Backing store property tests\\n\\nWe started working on [state-machine tests for the backing\\nstore](https://github.com/input-output-hk/ouroboros-network/pull/4081) that UTxO\\nHD uses. The property tests uncovered errors in the range-reads implementation\\nof the LMDB backing store. To facilitate fixing this bug, we made\\n[changes](https://github.com/input-output-hk/lmdb-simple/pull/1) to the Haskell\\nLMDB bindings.\\n\\n## Benchmarking the CSJ prototype\\n\\nPrompted by previous benchmarks showing significant improvements in sync time by\\nusing more capabilities, we implemented a way to spread out the ChainSync\\nupdates over a larger period instead of firing them all at the same time. This\\ndidn\'t result in a noticeable speedup.\\n\\nWe also benchmarked the prototype with CSJ disabled (such that just the dynamo\\npeer is running ChainSync, but e.g. BlockFetch still sees all peers) to rule\\nout/confirm overhead by non-ChainSync (mainly BlockFetch) related components.\\nThis results in era-specific behavior (speed is like the prototype in Byron, but\\nlike the baseline in Shelley). This deserves a closer look in the future.\\n\\nThis diagram shows the respective syncing progress, starting at Genesis and\\ncontinuing a good part into Shelley (with the dashed line indicating the\\nByron-to-Shelley transition).\\n\\n - Red: baseline\\n - Green: CSJ prototype, 10 peers, jumps every 3000/f slots, jumps in clumps.\\n - Blue: like Green, jumps are spread out.\\n - Orange: variant with no jumping, to measure unrelated overhead.\\n\\n![](/images/happy-path-csj-prototype-bench-2.svg)"},{"id":"2022-10-14-hydra","metadata":{"permalink":"/cardano-updates/2022-10-14-hydra","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-10-14-hydra.md","source":"@site/blog/2022-10-14-hydra.md","title":"Hydra Team Update","description":"This week, the hydra team worked on implementing ADR18 to get backup & restore functionality of the hydra-node over the line. Although not fully there yet, an early version of that feature was already needed and succesfully tested by SundaeSwap in their recent demonstration of their DEX running on Hydra. The team also worked on the updated specificaton, met with the researchers and discussed a solution for how to secure rollbacks \\"past the opening of a Head\\". We also reponded to recent requests for static executables and prioritized that feature higher, implemented it and merged it.","date":"2022-10-14T00:00:00.000Z","formattedDate":"October 14, 2022","tags":[{"label":"hydra","permalink":"/cardano-updates/tags/hydra"}],"readingTime":1.24,"hasTruncateMarker":false,"authors":[{"name":"Sebastian Nagel","title":"Hydra Team Lead","url":"https://github.com/ch1bo","imageURL":"https://github.com/ch1bo.png","key":"ch1bo"}],"frontMatter":{"title":"Hydra Team Update","slug":"2022-10-14-hydra","authors":"ch1bo","tags":["hydra"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Team Update","permalink":"/cardano-updates/2022-10-18-consensus"},"nextItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/2022-10-14-ledger"}},"content":"This week, the hydra team worked on implementing ADR18 to get backup & restore functionality of the `hydra-node` over the line. Although not fully there yet, an early version of that feature was already needed and succesfully tested by SundaeSwap in their recent demonstration of their DEX running on Hydra. The team also worked on the updated specificaton, met with the researchers and discussed a solution for how to secure rollbacks \\"past the opening of a Head\\". We also reponded to recent requests for static executables and prioritized that feature higher, implemented it and merged it.\\n\\n# What did the team achieve this week\\n\\n- Last week we thought we were done with [ADR18](https://hydra.family/head-protocol/adr/18/), but were not ...\\n- ... instead, SundaeSwap has been preparing their Rare bloom Hydra demo & needed assistence.\\n- Implemented a first version for persistence [#187](https://github.com/input-output-hk/hydra-poc/issues/187) in response.\\n- Enhanced CI to publish test results [on our website](https://hydra.family/head-protocol/benchmarks/tests/hydra-node/hspec-results)\\n- Engineering meeting -> discussed rollbacks and discovered a solution for the rollback past open problem!\\n- Pulled static executable feature [#200](https://github.com/input-output-hk/hydra-poc/issues/200) into scope, implemented it and merged it!\\n- Received and read through a project proposal by a vendor (building a Hydra platform).\\n\\n# What are the goals of next week\\n\\n- Get backup/recovery [#187](https://github.com/input-output-hk/hydra-poc/issues/187) done with proper event sourcing (ADR18)\\n- Cut the next release, version `0.8.0`\\n- Address open comments on specification document & complete the list of identified gaps between specification and implementation [#452](https://github.com/input-output-hk/hydra-poc/issues/452)\\n- Have the CI build macos artifacts"},{"id":"2022-10-14-ledger","metadata":{"permalink":"/cardano-updates/2022-10-14-ledger","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-10-14-ledger.md","source":"@site/blog/2022-10-14-ledger.md","title":"Ledger Team Update","description":"The ledger team is still primarily focused on addressing","date":"2022-10-14T00:00:00.000Z","formattedDate":"October 14, 2022","tags":[{"label":"ledger","permalink":"/cardano-updates/tags/ledger"}],"readingTime":2.01,"hasTruncateMarker":false,"authors":[{"name":"Jared Corduan","title":"Ledger Team Lead","url":"https://github.com/JaredCorduan","imageURL":"https://github.com/JaredCorduan.png","key":"JaredCorduan"}],"frontMatter":{"title":"Ledger Team Update","slug":"2022-10-14-ledger","authors":"JaredCorduan","tags":["ledger"],"hide_table_of_contents":false},"prevItem":{"title":"Hydra Team Update","permalink":"/cardano-updates/2022-10-14-hydra"},"nextItem":{"title":"Consensus Team Update","permalink":"/cardano-updates/2022-10-05-consensus"}},"content":"The ledger team is still primarily focused on addressing\\n[technical](https://github.com/input-output-hk/cardano-ledger/issues?q=is%3Aissue+is%3Aopen+label%3A%22%3Acredit_card%3A+technical-debt%22)\\n[debt](https://github.com/input-output-hk/cardano-ledger/projects/3).\\nWe now have the infrastructure for versioning our serialization schemes,\\nwhich we continue to put into action.\\nWe have made first steps towards getting proper support for the\\n[formal ledger repository](https://github.com/input-output-hk/formal-ledger-specifications)\\n(in particular, we\'ve added nix builds and\\ncontinuous integration support).\\nWe are wrapping up an investigation of the performance of a critical\\nfunction used by the consensus layer for leader checks.\\nFinally, we are improving the packaging and versioning of our code.\\n\\n# Lower level summary\\n\\n## Completed Technical Debt\\n\\n- Because the Shelley ledger era was a complete re-write of the Byron ledger era, a lot of\\n  our code lives in the `cardano-ledger-shelley` package, though with hindsight we can say that\\n  much of it should live in `cardano-ledger-core`.\\n  We continue to move things to `cardano-ledger-core`, and have much more to come. [[pull-3059]]\\n- We now have the infrastructure to support **versioned** serialization schemes.\\n  The inability to do this has caused us a lot difficulties,\\n  such as [[issue-3003]], [[issue-2965]] and [[issue-2444]].\\n  We are still in the process of switching to the versioned serialization scheme\\n  (such as [[pull-3078]]),\\n  but the infrastructure was completed in [[pull-3063]].\\n- We now have proper nix and CI support for the formal ledger project. [[pull-19]]\\n- A separate team is helping bring support for\\n  [CHaP](https://github.com/input-output-hk/cardano-haskell-packages)\\n  to all the cardano-node repositories.\\n  We have been helping out with this effort.\\n* A separate team continues working on upgrading all the\\n  cardano-node repositories to work with ghc 9.2.4.\\n  We have been helping out with this effort.\\n\\n## In-progress Technical Debt\\n\\nWe also have several fairly large pull-requests in review\\nthat we are working on.\\n\\n- In an on-going attempt to build out a more user-friendly API,\\n  we continue to remove `HasField` instances in place of using micro-lenses.\\n  The protocol parameters, in particular, are being worked on. [[pull-3045]]\\n- We are also renaming record fields to be consistent across the repository. [[pull-3062]]\\n- We are now cleaning up all the work we did to understand the performance\\n  of the TICKF transition. We have some improvements to the computatation\\n  as well. [[pull-3068]]\\n- We are adding more documentation, in particular to our `Twiddler` functionality. [[pull-3073]]\\n- The formal ledger is adding support for finite set theory. [[pull-20]]\\n\\n[issue-2444]: https://github.com/input-output-hk/cardano-ledger/issues/2444\\n[issue-2965]: https://github.com/input-output-hk/cardano-ledger/issues/2965\\n[issue-3003]: https://github.com/input-output-hk/cardano-ledger/issues/3003\\n\\n[pull-3059]: https://github.com/input-output-hk/cardano-ledger/pull/3059\\n[pull-3045]: https://github.com/input-output-hk/cardano-ledger/pull/3045\\n[pull-3062]: https://github.com/input-output-hk/cardano-ledger/pull/3062\\n[pull-3063]: https://github.com/input-output-hk/cardano-ledger/pull/3063\\n[pull-3068]: https://github.com/input-output-hk/cardano-ledger/pull/3068\\n[pull-3073]: https://github.com/input-output-hk/cardano-ledger/pull/3073\\n[pull-3078]: https://github.com/input-output-hk/cardano-ledger/pull/3078\\n[pull-19]: https://github.com/input-output-hk/formal-ledger-specifications/pull/19\\n[pull-20]: https://github.com/input-output-hk/formal-ledger-specifications/pull/20"},{"id":"2022-10-05-consensus","metadata":{"permalink":"/cardano-updates/2022-10-05-consensus","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-10-05-consensus.md","source":"@site/blog/2022-10-05-consensus.md","title":"Consensus Team Update","description":"This week, the consensus team worked on improving the performance of the","date":"2022-10-05T00:00:00.000Z","formattedDate":"October 5, 2022","tags":[{"label":"consensus","permalink":"/cardano-updates/tags/consensus"}],"readingTime":1.79,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Team Update","slug":"2022-10-05-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/2022-10-14-ledger"},"nextItem":{"title":"DB Sync Team Update","permalink":"/cardano-updates/2022-10-04-db-sync"}},"content":"This week, the consensus team worked on improving the performance of the\\nChainSync jumping logic, which is needed for Genesis. We also rewrote the\\nimplementation of the mempool in the UTxO HD prototype which solved the issues\\nthat prevented us from running system level benchmarks. Also on the UTxO HD\\nfront, we have an improved implementation of the sequence-of-differences (a\\ncrucial piece of UTxO HD), and we also elaborated a test sign-off list for the\\nUTxO HD feature.\\n\\n# Executive summary\\n\\n- With the latest implementation of ChainSync jumping we are closer to the\\n  baseline performance. In particular, the prototype seems to benefit from the\\n  extra concurrency provided by additional capabilities.\\n- We rewrote the implementation of the mempool in the UTxO HD prototype. This\\n  rewrite was required due to performance problems we observed when running the\\n  [workbench](https://github.com/input-output-hk/cardano-node/blob/master/Makefile#L51).\\n  These performance problems prevented us from running system level benchmarks.\\n  The rewrite solved these issues. After the [UTxO-HD: mempool\\n  rewrite](https://github.com/input-output-hk/ouroboros-network/pull/4049) PR is\\n  merged, we will contact the Benchmarking team so that they run the system\\n  level benchmarks.\\n- The implementation of sequences of differences based on anti-diffs was\\n  integrated into the UTxO HD prototype. It is pending\\n  [review](https://github.com/input-output-hk/ouroboros-network/pull/4036) and\\n  we also need to run replay and syncing benchmarks to confirm that this will\\n  deliver a performance improvement, as observed in our micro-benchmarks.\\n- [The UTxO HD prototype\\n  inspection](https://github.com/input-output-hk/ouroboros-network/issues/3944)\\n  resulted in a [list of\\n  tests](https://github.com/input-output-hk/ouroboros-network/issues/4045)\\n  needed for consensus to consider the UTxO HD prototype as fully tested.\\n\\n# Additional information\\n\\n## Genesis\\n\\nBenchmarking setup: 50MBit/s, 50ms latency\\n\\n - Red: baseline\\n - Green: Current CSJ prototype, 10 peers, jumps every 3000/f slots.\\n\\nAs ChainSync Jumping involves many concurrent network operations at every jump,\\nwe tried to run the node with 6 instead of the default 2 capabilties.\\n\\n - Orange: baseline with 6 capabilities\\n - Blue: CSJ prototype with 6 capabilities\\n\\nThis diagram shows the respective syncing progress, starting at Genesis and\\ncontinuing a good part into Shelley (with the dashed line indicating the\\nByron-to-Shelley transition).\\n\\n![](/images/happy-path-csj-prototype-bench-1.svg)\\n\\nFurther work includes whether we can tune the prototype to better handle few\\ncapabilities, or to adapt the default number of capabilities (potentially just\\nwhile syncing)."},{"id":"2022-10-04-db-sync","metadata":{"permalink":"/cardano-updates/2022-10-04-db-sync","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-10-04-db-sync.md","source":"@site/blog/2022-10-04-db-sync.md","title":"DB Sync Team Update","description":"Fast restarts","date":"2022-10-04T00:00:00.000Z","formattedDate":"October 4, 2022","tags":[{"label":"db-sync","permalink":"/cardano-updates/tags/db-sync"}],"readingTime":1.635,"hasTruncateMarker":false,"authors":[{"name":"Kostas Dermentzis","title":"Cardano DB-Sync Software Engineer","url":"https://github.com/kderme","imageURL":"https://github.com/kderme.png","key":"kderme"}],"frontMatter":{"title":"DB Sync Team Update","slug":"2022-10-04-db-sync","authors":"kderme","tags":["db-sync"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Team Update","permalink":"/cardano-updates/2022-10-05-consensus"},"nextItem":{"title":"Node API & CLI Team Update","permalink":"/cardano-updates/2022-10-04-node-cli-api"}},"content":"### Fast restarts\\n We fixed a long overdue issue in db-sync which caused long delays on restarts\\n [1266](https://github.com/input-output-hk/cardano-db-sync/pull/1266). This has been\\n one of db-sync main objectives for this period. Restarts are now very fast,\\n because db-sync deletes almost nothing from the db, it just replays the ledger rules until it\\n reaches the tip of the db. The fix also improves reconnection speed, in cases where the node\\n restarts or the connection is temporarily lost. It also speeds up even more in cases where due to a\\n deployment mess up a very old snapshot or no snapshot at all is used.\\n\\n### Property based testing\\nWe added stateful property based testing, using `quickcheck-state-machine`\\n [1269](https://github.com/input-output-hk/cardano-db-sync/pull/1269). These tests use empty or\\n almost empty blocks to test the new behaviour of restarts and rollbacks.\\n\\n These tests generate arbitrarily a list of symbolic commands from these:\\n\\n```\\nRollForward Int\\nRollBack BlockNo\\nStopDBSync\\nStartDBSync\\nRestartNode\\nAssertBlockNo BlockNo\\n```\\n\\nThe commands are translated into real commands. For example `RollForward Int` will forge a new block\\nthat fits on the current chain. These real commands are executed against db-sync using the mock\\nchain-sync server. The symbolic commands are executed against a vesy simplistic Model of db-sync\\nwhich looks like this:\\n\\n``` haskell\\n  Model\\n    { serverTip :: BlockNo\\n    , dbSyncTip :: BlockNo\\n    , dbSynsIsOn :: Bool\\n    , dbSynsHasSynced :: Bool\\n    }\\n```\\n\\nFinally a number of postconditions are checked, related to the eventual block number of db-sync.\\n\\n### Tech Debt\\n\\nWe handled a number of tech debt in\\n [1275](https://github.com/input-output-hk/cardano-db-sync/pull/1275)\\n This improves the code format of db-sync, deletes many queries that were never used and groups the\\n others. This tech debt resolution not only improves the experience of working in db-sync, but can\\n facilitate some of our other objectives, as it makes it very explicit which queries are used\\n during syncing and which indexes are necessary.\\n\\n### Smash\\n\\nWe worked on fixing an issue related to fetching pool metadata\\n [1276](https://github.com/input-output-hk/cardano-db-sync/pull/1276).\\n The issue which is described in\\n [1270](https://github.com/input-output-hk/cardano-db-sync/issues/1270)"},{"id":"2022-10-04-node-cli-api","metadata":{"permalink":"/cardano-updates/2022-10-04-node-cli-api","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-10-04-node-cli-api.md","source":"@site/blog/2022-10-04-node-cli-api.md","title":"Node API & CLI Team Update","description":"Executive Summary","date":"2022-10-04T00:00:00.000Z","formattedDate":"October 4, 2022","tags":[{"label":"cli-api","permalink":"/cardano-updates/tags/cli-api"}],"readingTime":0.965,"hasTruncateMarker":false,"authors":[{"name":"Jordan Millar","title":"Node Team Lead","url":"https://github.com/Jimbo4350","imageURL":"https://github.com/Jimbo4350.png","key":"Jimbo4350"}],"frontMatter":{"title":"Node API & CLI Team Update","slug":"2022-10-04-node-cli-api","authors":"Jimbo4350","tags":["cli-api"],"hide_table_of_contents":false},"prevItem":{"title":"DB Sync Team Update","permalink":"/cardano-updates/2022-10-04-db-sync"},"nextItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/2022-09-30-ledger"}},"content":"# 2022-10-04 - 2022-10-18\\n\\n## Executive Summary\\nThe majority of the team\'s time was spent between getting `1.34.4` ready, addressing various feature requests/issues/bugs that have arisen and refactoring components in the api and cli. The current refactoring is aimed at the long term goal of empowering users to be able to easily build applications similar to `cardano-cli`.\\n\\n## Completed\\n\\n- [GHC 9.2.4 preparations](https://github.com/input-output-hk/cardano-node/pull/4504)\\n\\n### cardano-cli\\n\\n- [Serenity] - [Separate IO from txBuild and txBuildRaw functions](https://github.com/input-output-hk/cardano-node/pull/4491)\\n\\n### cardano-api\\n\\n- [BUGFIX] - [TxWitness text envelope format does not roundtrip in Shelley era](https://github.com/input-output-hk/cardano-node/pull/4501)\\n\\n### cardano-node\\n\\n- [Fix MacOS GHA CI](https://github.com/input-output-hk/cardano-node/pull/4526)\\n\\n## In Progress\\n\\n- [Release 1.34.4](https://github.com/input-output-hk/cardano-node/pull/4508)\\n\\n### cardano-cli\\n\\n- [BUGFIX] - [Fix query era mismatch bug in transaction build command](https://github.com/input-output-hk/cardano-node/pull/4538)\\n- [Serenity] - [Condense Read and Validation modules in cardano-cli](https://github.com/input-output-hk/cardano-node/pull/4516)\\n- [BUGFIX]- [Stop the cli from changing the bytes in user-supplied data](https://github.com/input-output-hk/cardano-node/pull/4537)\\n- [Infer protocol params in transaction build](https://github.com/input-output-hk/cardano-node/pull/4431)\\n- [Allow assembling transactions with no witnesses](https://github.com/input-output-hk/cardano-node/pull/4408)\\n- [Add tx-mempool command to CLI](https://github.com/input-output-hk/cardano-node/pull/4276)\\n\\n## cardano-api\\n\\n- [Return Lovelace for calculateMinimumUTxO](https://github.com/input-output-hk/cardano-node/pull/4482)\\n- [Make TxBodyContent an instance of Monoid](https://github.com/input-output-hk/cardano-node/pull/4458)\\n- [Auto-balance multiasset transactions](https://github.com/input-output-hk/cardano-node/pull/4450)\\n\\n## cardano-node\\n\\n- [Stop running CI when the only changes are to docs](https://github.com/input-output-hk/cardano-node/pull/4263)\\n- [Rename TestEnableDevelopmentHardForkEras](https://github.com/input-output-hk/cardano-node/pull/4341)"},{"id":"2022-09-30-ledger","metadata":{"permalink":"/cardano-updates/2022-09-30-ledger","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-09-30-ledger.md","source":"@site/blog/2022-09-30-ledger.md","title":"Ledger Team Update","description":"We have continued focusing nearly entirely on addressing technical debt.","date":"2022-09-30T00:00:00.000Z","formattedDate":"September 30, 2022","tags":[{"label":"ledger","permalink":"/cardano-updates/tags/ledger"}],"readingTime":2.27,"hasTruncateMarker":false,"authors":[{"name":"Jared Corduan","title":"Ledger Team Lead","url":"https://github.com/JaredCorduan","imageURL":"https://github.com/JaredCorduan.png","key":"JaredCorduan"}],"frontMatter":{"title":"Ledger Team Update","slug":"2022-09-30-ledger","authors":"JaredCorduan","tags":["ledger"],"hide_table_of_contents":false},"prevItem":{"title":"Node API & CLI Team Update","permalink":"/cardano-updates/2022-10-04-node-cli-api"},"nextItem":{"title":"Network Team Update","permalink":"/cardano-updates/2022-09-27-network"}},"content":"We have continued focusing nearly entirely on addressing technical debt.\\nA lot of design work has begun for the next ledger era,\\nbut we do not yet have anything concrete to share.\\n\\n## Technical debt issues completed\\n\\n* [[issue-1676]][[pull-2992]] We have finally removed the ledger dependency on the\\n  `cardano-prelude` package. It was barely used in the ledger repository, and it added a dependency\\n  that we did not want to maintain. It was a bit difficult to remove, and we had\\n  to coordinate removing it from cardano-base.\\n  A lot ended up going into [pull-2992][pull-2992], due to the coordination effort, and we ended\\n  up updating Plutus as well.\\n  This means that we\'ve now also made a lot of progress on the problematic cost model serialization\\n  issues described in [issue-2902].\\n  In particular, after we resolve [issue-3014], we will not have to wait an epoch before\\n  releasing a cost model for a new version of Plutus, as we had to do for the Vasil HF.\\n* [[issue-3046]][[pull-3055]] We moved a module that is now only used in Byron to a Byron package.\\n* [[issue-3047]][[pull-3054]] We improved the interface to the `Value` (multi-asset) type.\\n* [[pull-3044]] We debugged and fixed a tricky compilation issue. Certain kinds of field updates\\n  were adding approximately 20 minutes to our compile time!\\n* [[issue-2932]][[pull-3036]] As a part of our ongoing re-organization of the codebase, we\\n  have added a `Cardano.Ledger.[Era].Core` module to each ledger era that has a TxBody class.\\n  Most classes defined in the era should go in this new module.\\n  We also re-export the `Cardno.Ledger.Core` module and the previous `Cardano.Ledger.[Era].Core`\\n  modules from each era.\\n\\n## Technical debt in progress\\n\\n* [[issue-3034]][[issue-3035]][[node-issue-4421]] We are continuing to write benchmarks to understand exactly where\\n  all the time is being spent on executing the `TICKF` transition.\\n  The consolidation of the per-stake-credential stake distribution to the per-stake-pool\\n  distribution does seem to account for a large amount of time (near a second as written, which we\\n  have down to about half a second with some optimizations),\\n  but this does not account for everything.\\n  Applying the reward update may also be a big contributing factor.\\n* [[pull-3033]][[pull-3038]][[pull-3041]] A separate team is working on upgrading all the\\n  cardano-node repositories to work with ghc 9.2.4. We have been helping out with this effort.\\n* The nix scripts used to build our new\\n  [formal ledger model](https://github.com/input-output-hk/formal-ledger-specifications)\\n  do not work consistently for everyone, and we have been working on fixing these issues.\\n* [[issue-3014]] We are still working on adding a versioning scheme to all of the ledger\\n  serializers.\\n\\n[issue-1676]: https://github.com/input-output-hk/cardano-ledger/issues/1676\\n[issue-2902]: https://github.com/input-output-hk/cardano-ledger/issues/2902\\n[issue-2932]: https://github.com/input-output-hk/cardano-ledger/issues/2932\\n[issue-3014]: https://github.com/input-output-hk/cardano-ledger/issues/3014\\n[issue-3034]: https://github.com/input-output-hk/cardano-ledger/issues/3034\\n[issue-3035]: https://github.com/input-output-hk/cardano-ledger/issues/3035\\n[issue-3046]: https://github.com/input-output-hk/cardano-ledger/issues/3046\\n[issue-3047]: https://github.com/input-output-hk/cardano-ledger/issues/3047\\n\\n[node-issue-4421]: https://github.com/input-output-hk/cardano-node/issues/4421\\n\\n[pull-2992]: https://github.com/input-output-hk/cardano-ledger/pull/2992\\n[pull-3033]: https://github.com/input-output-hk/cardano-ledger/pull/3033\\n[pull-3038]: https://github.com/input-output-hk/cardano-ledger/pull/3038\\n[pull-3036]: https://github.com/input-output-hk/cardano-ledger/pull/3036\\n[pull-3041]: https://github.com/input-output-hk/cardano-ledger/pull/3041\\n[pull-3044]: https://github.com/input-output-hk/cardano-ledger/pull/3044\\n[pull-3054]: https://github.com/input-output-hk/cardano-ledger/pull/3054\\n[pull-3055]: https://github.com/input-output-hk/cardano-ledger/pull/3055"},{"id":"2022-09-27-network","metadata":{"permalink":"/cardano-updates/2022-09-27-network","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-09-27-network.md","source":"@site/blog/2022-09-27-network.md","title":"Network Team Update","description":"Ouroboros Network","date":"2022-09-27T00:00:00.000Z","formattedDate":"September 27, 2022","tags":[{"label":"network","permalink":"/cardano-updates/tags/network"}],"readingTime":2.24,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Network Team Update","slug":"2022-09-27-network","authors":"coot","tags":["network"],"hide_table_of_contents":false},"prevItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/2022-09-30-ledger"},"nextItem":{"title":"Consensus Team Update","permalink":"/cardano-updates/2022-09-20-consensus"}},"content":"```mdx-code-block\\nimport  ReactPlayer from \'react-player\'\\n```\\n\\n# Network Update\\n\\n## Ouroboros Network\\n\\n* We finished high and low level _peer sharing_ design. See\\n  [Peer Sharing Implementation Plan](https://github.com/input-output-hk/ouroboros-network/wiki/Peer-Sharing-Implementation-Plan)\\n* We started working on low-level design of _eclipse evasion_ (work in\\n  progress).\\n* We decided to use **peer sharing** instead of overloaded and ambiguous _gossip_ term.\\n  [PR input-output-hk/ouroboros-network#3980](https://github.com/input-output-hk/ouroboros-network/pull/3980)\\n* We fixed technical dept\\n  [issue input-output-hk/cardano-node#3905](https://github.com/input-output-hk/ouroboros-network/issues/3905) in\\n  the simulation testing of diffusion\\n  [PR input-output-hk/cardano-node#4004](https://github.com/input-output-hk/ouroboros-network/pull/4004)\\n* We deployed all our nodes using our new nix based deployment architecture.\\n  When deploying we found an issue in the\\n  [`RTView`](https://github.com/input-output-hk/cardano-node/issues/3752).\\n\\n## Ouroboros Consensus\\n\\n* Recently we found out that the consensus does not log exceptions thrown during\\n  intiialisation.  This was fixed in\\n  [PR input-output-hk/ouroboros-network#4015](https://github.com/input-output-hk/ouroboros-network/pull/4015)\\n  As part of this pull request we also changed that all exceptions rethrown by\\n  the connection handler thread are wrapped in `ExceptionInHandler`.\\n\\n### Some older items, which were not announced\\n\\n* We identified and fixed an issue related to socket activation (socket options\\n  where not set for sockets passed through socket activation).\\n  [PR input-output-hk/cardano-node#3979](https://github.com/input-output-hk/ouroboros-network/pull/3979)\\n  This fix will be released in the next `cardano-node` release.\\n\\n## Cardano Node\\n\\n* We extended the NixOs service module so that one can modify `socketPath`,\\n  `runtimeDir`, `databasePath`, `traceSocketPathAccept`,\\n  `traceSocketPathConnect` and `stateDir` options.\\n   [PR input-output-hk/cardano-node#4196](https://github.com/input-output-hk/cardano-node/pull/4196)\\n\\n## IO-Sim\\n\\nWe resolved a number of issues before release of `io-sim` on hackage:\\n\\n* [issue input-output-hk/ouroboros-network#2797](https://github.com/input-output-hk/ouroboros-network/issues/2797)\\n* [issue input-output-hk/ouroboros-network#2650](https://github.com/input-output-hk/ouroboros-network/issues/2650)\\n* [issue input-output-hk/ouroboros-network#3436](https://github.com/input-output-hk/ouroboros-network/issues/3436)\\n* [issue input-output-hk/ouroboros-network#2588](https://github.com/input-output-hk/ouroboros-network/issues/2588)\\n* [issue input-output-hk/ouroboros-network#2587](https://github.com/input-output-hk/ouroboros-network/issues/2587)\\n* [issue input-output-hk/ouroboros-network#2586](https://github.com/input-output-hk/ouroboros-network/issues/2586)\\n\\nSee [PR #24](https://github.com/input-output-hk/io-sim/pull/24).\\n\\nWe also improved experience for contributors of `io-sim` and `typed-protocols` by adding issue templates:\\n* [PR input-output-hk/io-sim#25](https://github.com/input-output-hk/io-sim/pull/25)\\n\\n## Typed Protocols\\n\\n* We pushed a branch which identifies a GHC quirk:\\n  [coot/typed-protocols-rewrite-StateToken-problem](https://github.com/input-output-hk/typed-protocols/tree/coot/typed-protocols-rewrite-StateToken-problem).\\n  That\'s too be resolved in order to push forward review of the redesign in\\n  [PR input-output-hk/typed-protocols#3](https://github.com/input-output-hk/typed-protocols/pull/3).\\n* As for `io-sim`, we wrote issue templates:\\n  [PR input-output-hk/typed-protocols#11](https://github.com/input-output-hk/typed-protocols/pull/11)\\n\\n## Input Endorsers Simulation\\n\\nNew features include:\\n\\n* Histograms of block arrival frequency, for both network (inbound) and CPU\\n  (block validation). This is interesting to check that we\'re not overloading\\n  the CPU block validation capacity, or network link capacity. Or alternatively\\n  to observe the behaviour in an overload situation if we set the block\\n  generation rate high enough.\\n\\n* Pie chart of utilisation of TCP links. This shows how small a fraction of\\n  links are being used at any one time, and shows that once the system \\"warms\\n  up\\" and is operating stably, most block delivery is ballistic.\\n\\n* Showing off the new screen layout combinators, that let us put multiple\\n  charts, titles etc on screen at once and scale them to whatever screen or\\n  video resolution we like without having to tweak numbers (this example is\\n  scaled to fit 1080HD video resolution).\\n\\n\\n```mdx-code-block\\n<ReactPlayer playing controls url=\'/p2p-relay-5.mp4\' />\\n```"},{"id":"2022-09-20-consensus","metadata":{"permalink":"/cardano-updates/2022-09-20-consensus","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-09-20-consensus.md","source":"@site/blog/2022-09-20-consensus.md","title":"Consensus Team Update","description":"- We proposed a fix for the performance degradation observed when running","date":"2022-09-20T00:00:00.000Z","formattedDate":"September 20, 2022","tags":[{"label":"consensus","permalink":"/cardano-updates/tags/consensus"}],"readingTime":3.895,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Team Update","slug":"2022-09-20-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Network Team Update","permalink":"/cardano-updates/2022-09-27-network"},"nextItem":{"title":"DB Sync Team Update","permalink":"/cardano-updates/2022-09-19-db-sync"}},"content":"- We proposed a fix for the performance degradation observed when running\\n  distributed multi-node benchmarks in the UTxO HD feature branch. While this\\n  fixed the problems observed when running local benchmarks, it broke the\\n  `ThreadNet` tests due to concurrency issues. Therefore, we think it is wise to\\n  start redesigning the UTxO HD mempool integration.\\n- We did several rounds of code review on the alternative implementation of\\n  diff-sequences required by the UTxO HD feature based on the idea of\\n  anti-diffs. This alternative implementation is close to being merged, and the\\n  next step is to integrate this to the UTxO HD branch, so that we can run\\n  ad-hoc replaying and syncing from scratch benchmarks and compare these with\\n  the baseline. The micro-benchmarks we elaborated for the alternative\\n  implementation show speedups of up to 4x, so we are optimistic about the\\n  performance of replaying and syncing from scratch benchmarks, however it is\\n  important to notice that *due to the nature of UTxO HD* we will still be\\n  slower than the baseline.\\n- The final draft of the Genesis implementation specification is ready for\\n  review.\\n- We implemented a prototype for the happy path of Genesis\' ChainSync Jumping\\n  (CSJ). The prototype is slower than the baseline, however it is not the latest\\n  version of the prototype and the jump interval is very small.\\n- Work on integrating Conway has [stopped][nicks-comment-conway] since\\n  priorities have changed.\\n- We started work on benchmarking epoch-boundaries and epoch overhead\\n  [pr-4014][pr-4014]. To this end, we made use of a modified version of our\\n  `db-analyser` tool. We ran the new benchmarking setup using the Cardano\\n  mainnet chain, and we can see that block tick and application take\\n  substantially longer at epoch boundaries, although there are a couple of slots\\n  during an epoch in which these computations take more than normal. We notified\\n  the ledger team about these findings. We will use this modified version of\\n  `db-analyser` to investigate the epoch overhead.\\n\\n\\n# Workstreams\\n\\n## UTxO HD\\n\\n - Spent quite some time investigating the root cause of the degradation in\\n   performance observed in the benchmarks. We run the `make forge-stress`\\n   benchmarks locally in order to debug this behavior.\\n\\n    - Transaction batching doesn\'t make a notable difference in the outcome\\n      (considering we are using the in-memory backend).\\n\\n    - The mempool batching implementation required asynchronous transaction\\n      validation which is a violation of the `LocalTxSubmission` protocol\\n      contract and therefore if we continued on that route, the impact would\\n      have been quite big.\\n\\n    - The STM logic we implemented by using a `TMVar` for the mempool internal\\n      state was buggy and under certain circumstances it seemed to lock.\\n      Reverting the mempool internal state to be stored in a `TVar` seems to\\n      solve this problem.\\n\\n    - The results we get after this change look almost identical to the ones\\n      from the baseline.\\n\\n  - [The anti-diff prototype (PR\\n    #3997)](https://github.com/input-output-hk/ouroboros-network/pull/3997) has\\n    been reviewed and is close to being merged.\\n\\n    - A follow-up issue ([issue\\n      #4010](https://github.com/input-output-hk/ouroboros-network/issues/4010))\\n      to integrate the anti-diff prototype in the various `consensus` packages\\n      was created. A first version of the integration exists, and all tests\\n      pass. A next step is to get some indication of the \\"real\\" performance gain\\n      by profiling `db-analyser` (or `cardano-node`).\\n\\n## Genesis\\n\\n - Final draft of the Genesis implementation specification, now up for review.\\n\\n - Local benchmark setup for parameter tuning via the happy path ChainSync\\n   Jumping (CSJ) prototype ([Issue 3987][issue-3987]).\\n\\n    - Context: Our Genesis design requires us to check in with a large (~20)\\n      number of servers periodically while syncing. These servers are offered\\n      jump requests via the ChainSync protocol (hence the name), which they can\\n      accept or decline. If a peer declines, the Genesis rule allows us to\\n      determine whether a node actually has a better chain.\\n\\n    - The \\"happy path\\" is when no peer declines a jump. We want this to have\\n      close to no overhead compared to status quo, i.e. syncing without Genesis.\\n\\n    - We implemented a prototype for this happy path, and are now starting to\\n      test in various configurations (number of peers, latency, bandwidth) to\\n      tune the performance of ChainSync jumping, i.e. how complicated our logic\\n      of choosing when to jump needs to be.\\n\\n    **Example:**\\n\\n     - Simulated connection: 50 MBit/s, 50ms latency\\n\\n     - Jump interval: 3000 slots (on the low end, could be increased to up to\\n       `3k/f`)\\n\\n     - Red: baseline (1.35.3), one peer in topology file\\n\\n     - Blue: Preliminary version of our prototype, with 10 peers.\\n\\n    ![](/images/happy-path-csj-prototype-prelim.svg)\\n\\n    It is slower by about ~30%, but it is not the latest version of the\\n    prototype, and the jump interval is very small, making CSJ more of a\\n    bottleneck.\\n\\n## Technical debt\\n\\n- Fix flakiness in ChainDB QSM tests ([PR 3990](https://github.com/input-output-hk/ouroboros-network/pull/3990)).\\n\\n[issue-3987]: https://github.com/input-output-hk/ouroboros-network/issues/3987\\n[nicks-comment-conway]: https://github.com/input-output-hk/ouroboros-network/pull/3971#issuecomment-1252524031\\n[pr-4014]: https://github.com/input-output-hk/ouroboros-network/pull/4014"},{"id":"2022-09-19-db-sync","metadata":{"permalink":"/cardano-updates/2022-09-19-db-sync","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-09-19-db-sync.md","source":"@site/blog/2022-09-19-db-sync.md","title":"DB Sync Team Update","description":"New Tag","date":"2022-09-19T00:00:00.000Z","formattedDate":"September 19, 2022","tags":[{"label":"db-sync","permalink":"/cardano-updates/tags/db-sync"}],"readingTime":1.51,"hasTruncateMarker":false,"authors":[{"name":"Kostas Dermentzis","title":"Cardano DB-Sync Software Engineer","url":"https://github.com/kderme","imageURL":"https://github.com/kderme.png","key":"kderme"}],"frontMatter":{"title":"DB Sync Team Update","slug":"2022-09-19-db-sync","authors":"kderme","tags":["db-sync"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Team Update","permalink":"/cardano-updates/2022-09-20-consensus"},"nextItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/2022-09-16-ledger"}},"content":"## New Tag\\nWe created a new db-sync tag 13.0.5 which addresses shortcomings of the last\\nrelease 13.0.4. It is currently under testing.\\nThe Changelog is\\n [here](https://github.com/input-output-hk/cardano-db-sync/blob/8ad98d48e0068f3768d48e18fdcbe254037cba3b/cardano-db-sync/CHANGELOG.md#1305) and in more details:\\n\\n* We fixed fees for tx with phase 2 failure that didn\'t include a total collateral field.\\n [1248](https://github.com/input-output-hk/cardano-db-sync/pull/1248)\\n\\n* We fixed an issue that could cause db-sync to crash if a specific rollback occured.\\n [1247](https://github.com/input-output-hk/cardano-db-sync/pull/1247)\\n\\n* DBSync will now avoid reserialising data, especially Datums, which not only slows down db-sync but\\n could result in the wrong CBOR encoding being inserted.\\n [1217](https://github.com/input-output-hk/cardano-db-sync/pull/1217)\\n\\n* All the fixes above come with unit tests which validates the fix.\\n\\n* Added support for preprod and preview from docker. DBSync no longer needs to include the configs\\n for different networks, these are directly fetched from the cardano world.\\n [1254](https://github.com/input-output-hk/cardano-db-sync/pull/1254)\\n\\n* We added better support from docker for the new disable options and the overall documentation.\\n [1260](https://github.com/input-output-hk/cardano-db-sync/pull/1260)\\n\\nAll the above were also backported to the master branch\\n\\n## Open source\\n\\nWe made the db-sync [board public](https://github.com/orgs/input-output-hk/projects/52/views/1), so\\n everyone can have access on the issues we prioritise.\\n We also added new tasks to the board, some of them could be approachable to newcomers or people who\\n want to contribute.\\n\\n## Progress on tech debt and new features\\n* [1223](https://github.com/input-output-hk/cardano-db-sync/pull/1223) was merged, which removes the\\n foreign keys from the db schema. This opens the road to a number of optimizations.\\n\\n* An additional fix on top of the previous work was added\\n [1250](https://github.com/input-output-hk/cardano-db-sync/pull/1250)\\n\\n* An initial version where DBSync does not rollback on restart is done here\\n [1266](https://github.com/input-output-hk/cardano-db-sync/pull/1266).\\nThis allows db-sync to restart much faster, without the need to delete data and reinsert them. In\\n the future it can also facilitate migrations in cases where the ledger snapshots have a breaking\\n  change, without the need to resync everything from genesis."},{"id":"2022-09-16-ledger","metadata":{"permalink":"/cardano-updates/2022-09-16-ledger","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-09-16-ledger.md","source":"@site/blog/2022-09-16-ledger.md","title":"Ledger Team Update","description":"We have been focused nearly entirely on addressing technical debt.","date":"2022-09-16T00:00:00.000Z","formattedDate":"September 16, 2022","tags":[{"label":"ledger","permalink":"/cardano-updates/tags/ledger"}],"readingTime":1.61,"hasTruncateMarker":false,"authors":[{"name":"Jared Corduan","title":"Ledger Team Lead","url":"https://github.com/JaredCorduan","imageURL":"https://github.com/JaredCorduan.png","key":"JaredCorduan"}],"frontMatter":{"title":"Ledger Team Update","slug":"2022-09-16-ledger","authors":"JaredCorduan","tags":["ledger"],"hide_table_of_contents":false},"prevItem":{"title":"DB Sync Team Update","permalink":"/cardano-updates/2022-09-19-db-sync"},"nextItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/2022-09-01-ledger"}},"content":"We have been focused nearly entirely on addressing technical debt.\\n\\n* We introduced more consistent naming across eras, this time for the auxiliary data.\\n  See [3032](https://github.com/input-output-hk/cardano-ledger/pull/3032).\\n* We made clear how the `consumed` functions differs between eras (which was a previous source of\\n  confusion), and added some related support to the fledgling ledger API.\\n  See [3016](https://github.com/input-output-hk/cardano-ledger/pull/3016).\\n* We added clarity and organizational consistency to the main ledger era type synonyms.\\n  See [3017](https://github.com/input-output-hk/cardano-ledger/pull/3017).\\n* We removed code duplication related to the input data hashes.\\n  See [3018](https://github.com/input-output-hk/cardano-ledger/pull/3018).\\n* We split up a large module into smaller components. The large module was actually causing our\\n  CI to time out.\\n  See [3020](https://github.com/input-output-hk/cardano-ledger/pull/3020).\\n* We cleaned up stale information in our cabal files, and upgraded cabal 3.8.\\n  See [3023](https://github.com/input-output-hk/cardano-ledger/pull/3023),\\n  [3031](https://github.com/input-output-hk/cardano-ledger/pull/3031),\\n  and [3028](https://github.com/input-output-hk/cardano-ledger/pull/3028).\\n* We made consistent, standalone `TxOut` (transaction output) modules for every era.\\n  See [3024](https://github.com/input-output-hk/cardano-ledger/pull/3024).\\n* We brought consistency to a maddening inconsistent use of type variables indicating the specific\\n  choice of cryptographic primitives. In particular, all uses of `crypto` have been renamed to `c`.\\n  See [3027](https://github.com/input-output-hk/cardano-ledger/pull/3027).\\n* We did a clean up of the types in the Alonzo era. In particular, we switched to more parametric\\n  types that will compose better in the future and which simplifies the constraints.\\n  See [3029](https://github.com/input-output-hk/cardano-ledger/pull/3029).\\n* We consolidated some existing fragmented logic regarding how we gather the scripts needed for a\\n  given transaction. This is a much needed cleanup to prevent future mistakes.\\n  See [3019](https://github.com/input-output-hk/cardano-ledger/pull/3019).\\n* We fixed a problem with our generators that was causing a fair number of our property tests to\\n  fail in CI.\\n  See [3039](https://github.com/input-output-hk/cardano-ledger/pull/3039).\\n* We have started the work to update Plutus. This will bring support for SECP in the next major\\n  protocol version, and also address a\\n  [problem](https://github.com/input-output-hk/cardano-ledger/issues/2902)\\n  that we current have evolving the cost models.\\n  See [3030](https://github.com/input-output-hk/cardano-ledger/pull/3030).\\n* We addressed a small issue that came up when integrating the conway era downstream, namely\\n  the lack of some serialization instances.\\n  See [3022](https://github.com/input-output-hk/cardano-ledger/pull/3022)."},{"id":"2022-09-01-ledger","metadata":{"permalink":"/cardano-updates/2022-09-01-ledger","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-09-01-ledger.md","source":"@site/blog/2022-09-01-ledger.md","title":"Ledger Team Update","description":"Since finishing up support for the Vasil Hardfork, the ledger team has been","date":"2022-09-01T00:00:00.000Z","formattedDate":"September 1, 2022","tags":[{"label":"ledger","permalink":"/cardano-updates/tags/ledger"}],"readingTime":1.925,"hasTruncateMarker":false,"authors":[{"name":"Jared Corduan","title":"Ledger Team Lead","url":"https://github.com/JaredCorduan","imageURL":"https://github.com/JaredCorduan.png","key":"JaredCorduan"}],"frontMatter":{"title":"Ledger Team Update","slug":"2022-09-01-ledger","authors":"JaredCorduan","tags":["ledger"],"hide_table_of_contents":false},"prevItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/2022-09-16-ledger"},"nextItem":{"title":"Consensus Team Update","permalink":"/cardano-updates/2022-08-31-consensus"}},"content":"Since finishing up support for the Vasil Hardfork, the ledger team has been\\nfocused on two main things: a new ledger era and technical debt.\\n\\n## New minimal ledger era\\n\\nWe have implemented a new ledger era named `conway` which is nearly identical\\nto the `babbage` era. This has been the first time that we have been able to see\\nwhat a minimal ledger era looks like. We have finished this task, modulo any\\nintegration issues that might come up. The only thing that the `conway` era\\ndoes differently from the `babbage` era is provide support for rotating\\nthe master keys using the hardfork combinator\'s state translation.\\nWe may end up adding features to the `conway` era, but it is a nice exercise\\nseeing what it looks like to get a minimal ledger era supported in all the\\ndownstream components.\\n\\n## Addressing technical debt\\n\\nWe have been addressing technical debt, mostly in an effort to make the\\nrepository a more friendly code base to work in.\\n\\n- We have begun work on a ledger API, called `cardano-ledger-api`.\\n- We have done a big re-design of the major type classes used in the ledger.\\n  With hindsight on our side, we now have something much more organized and\\n  easier to use.\\n- We have done a lot of re-naming. The names across eras are now much more\\n  uniform, avoid certain confusions that plagued us, and are clearer in where\\n  they are from.\\n- We have reduced a lot of code duplication that could lead to bugs if you\\n  do not have the whole code base in your head.\\n- We have added a handful of performance improvements.\\n- We added type safety in a number of locations. In particular, the type of\\n  values that can be minted in a transaction no longer allow for Lovelace\\n  in the type, and some functions which used to handle both timelock scripts\\n  and plutus script now correctly enoforce at the type level that only one of\\n  them can be used.\\n- We made our generators so that they now produce a much richer set of\\n  valid serializations. There is room within CBOR to serialize the same\\n  data structure in multiple ways, and it is helpful to have the generators\\n  use a wide variety.\\n- We have begun re-organizing our test suites."},{"id":"2022-08-31-consensus","metadata":{"permalink":"/cardano-updates/2022-08-31-consensus","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-08-31-consensus.md","source":"@site/blog/2022-08-31-consensus.md","title":"Consensus Team Update","description":"- We did most of the heavy lifting required to integrate the Conway era.","date":"2022-08-31T00:00:00.000Z","formattedDate":"August 31, 2022","tags":[{"label":"consensus","permalink":"/cardano-updates/tags/consensus"}],"readingTime":8.91,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Team Update","slug":"2022-08-31-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Ledger Team Update","permalink":"/cardano-updates/2022-09-01-ledger"},"nextItem":{"title":"Network Team Update","permalink":"/cardano-updates/2022-08-12-network"}},"content":"- We did most of the heavy lifting required to integrate the Conway era.\\n- We have property tests for the UTxO HD backing store API implementations. A\\n  possible bug was identified. Work is ongoing to make sure the property-tests\\n  cover all the relevant cases.\\n- We implemented and benchmarked the \\"anti-diff\\" prototype to speed up the UTxO\\n  HD functionality. Results show a rough speedup of `4x` to `5.5x` across\\n  several scenarios. Note that: [\\"Data reported by `tasty-bench` is only of\\n  indicative and comparative significance.\\"](https://hackage.haskell.org/package/tasty-bench-0.3.2/docs/Test-Tasty-Bench.html).\\n  We are investigating additional performance improvements. The \\"anti-diff\\"\\n  prototype and benchmarks are still pending code review.\\n- We elaborated a draft specification for the Genesis implementation and\\n  `ChainSync` jumping optimization.\\n\\n# Workstreams\\n\\n## Conway\\n\\n - Integration PR of the minimal Conway era ([Issue #3963][issue-3962], [PR\\n   #3971][pull-3971]).\\n - Discussions with Ledger revealed possible sources of confusion about which\\n   data should be changed in the Conway era. As a result, a new technical debt\\n   issue was raised, which does not block the integration of the Conway era\\n   ([Issue #3976][issue-3976]).\\n\\n## UTxO HD\\n\\n- [Issue #3954][issue-3954], [branch][branch-3954]: The functionality of a\\n  backing store, which is the interface to the on-disk part of ledger state in\\n  UTxO-HD, is tested at a high level through the `OnDisk` tests. However, some\\n  functionalities remain untested, e.g., reads of ranges of keys. As such, we\\n  have implemented `quickcheck-state-machine` tests that exercise backing stores\\n  directly. The tests are reusable for different backing store implementations\\n  because the tests are implementation-agnostic: Any backing store that conforms\\n  to the backing store interface can be plugged into the tests. Work is still\\n  ongoing to label/monitor the tests, such that we can verify that interesting\\n  cases are being tested. Furthermore, a possible bug has been identified in the\\n  LMDB backing store with respect to range reads, though the bug has not been\\n  resolved yet.\\n- [Issue #3946][issue-3946], [branch][branch-4199], [PR #3882][pull-3882]: The\\n  \\"anti-diff\\" prototype proposes an alternative approach to keeping track of\\n  sequences (more specifically, `FingerTree`s) of diffs. These diff sequences\\n  are a component of the in-memory parts of the ledger state in UTxO-HD. Since\\n  the consensus code often requires the cumulative diff of a sequence of diffs,\\n  the current implementation \\"caches\\" cumulative diffs of each subtree in the\\n  diff sequence. This caching allows relatively fast reconstruction of the total\\n  cumulative diff, but this caching proved to incur a non-negligible cost: when\\n  we manipulate diff sequences through splits and appends, we force re-computing\\n  a logarithmic number of caches. This is problematic, since we often split and\\n  append in consensus: we split when we flush diffs to a backing store or when\\n  we roll back blocks, and we append when pushing blocks. The new approach\\n  should reduce the overhead of this caching.\\n\\n  We implemented micro-benchmarks for the \\"anti-diff\\" prototype: we\\n  first generate a sequence of commands (`Forward`, `Push`, `Flush`, or\\n  `Rollback`) through a simulation, after which we measure the performance of\\n  applying the commands to a diff sequence. In this context, `Forward` means\\n  forwarding of values through a diff, whereas `Rollback` means switching to\\n  a different fork by rolling back diffs/blocks and pushing new ones.\\n  Moreover, we compare the performance for the two implementations: the\\n  \\"legacy\\" approach, and the anti-diff approach.\\n\\n  Some preliminary results were positive, but we needed to revisit the\\n  benchmark\'s configuration to obtain more definitive results. After a\\n  discussion with @dcoutts and the consensus team about this configuration\\n  (e.g., number of commands generated, choice of the security parameter `k`),\\n  the benchmarks should now be closer to the realistic setting. The following\\n  configuration specifies the default configuration that is used in the\\n  benchmarking code:\\n  * Number of commands generated: `10_000`\\n  * Security parameter `k`: `2160`\\n  * Number of initial backing values: `100`\\n  * Number of key-value pairs deleted by a push: `50`\\n  * Number of key-value pairs inserted by a push: `50`\\n  * Number of key-value pairs forwarded by a forward: `50`\\n  * Probability of a large (in the range `[1000, 2000]`) rollback: `0.05`\\n  * Probability of a small (in the range `[1, 10]`) rollback: `0.95`\\n  * Order of commands:\\n    * An equal number of forward and pushes.\\n    * `1` flush every `10` pushes.\\n    * `1` rollback every `100` pushes\\n\\n  Moreover, we run four benchmark scenarios:\\n  * Default configuration\\n  * Without rollbacks\\n  * With only small rollbacks\\n  * Without rollbacks, larger flushes (`1` flush every `100` pushes)\\n\\n  ### How to read results\\n\\n  Note: this section uses documentation from the\\n  [tasty-bench](https://hackage.haskell.org/package/tasty-bench) package to\\n  explain how to read the results of running our benchmarks.\\n\\n  Running a benchmark scenario gives us the following (curated) output:\\n  ```text\\n  ...\\n  AntiDiff:                               OK (18.27s)\\n    2.527 s \xb1  47 ms, 2.1 GB allocated, 544 MB copied, 2.2 GB peak memory, 0.23x\\n  LegacyDiff:                             OK (32.73s)\\n    10.829 s \xb1 148 ms, 6.8 GB allocated, 2.3 GB copied, 2.2 GB peak memory\\n  ...\\n  ```\\n\\n  The output says that the first benchmark, which exercises the anti-diff\\n  prototype, was repeatedly executed for `18.27` seconds (wall-clock time),\\n  its predicted mean CPU time was `2.527` seconds and means of individual\\n  samples do not often diverge from it further than `\xb1 47` milliseconds\\n  (double standard deviation). We also configure the RTS to collect GC\\n  statistics, which enables `tasty-bench` to estimate and report memory usage.\\n  This data is reported as per `RTSStats` fields: `allocated_bytes`,\\n  `copied_bytes` and `max_mem_in_use_bytes`. So, the output of the first\\n  benchmark says that a total of `2.1 GB` of memory was allocated, that a\\n  total of `544 MB` of memory were copied, and that the peak memory in usage\\n  was `2.2 GB`. We read the output for the second benchmark in the same way.\\n\\n  Furthermore, the benchmark compares the mean CPU times for\\n  both the anti-diff and legacy approaches: In this case, the mean CPU time\\n  for the anti-diff approach is `~0.23x` the mean CPU time for the legacy\\n  approach. Conversely, the mean CPU time for the legacy approach is\\n  `1 / 0.23 ~= 4.35x` the mean CPU time for the anti-diff approach. We will\\n  call `0.23x` the *improvement factor*. We will call `4.35x` the *speedup*.\\n\\n  Note that these improvement factors (and reported results) are subject to\\n  noise, randomness, the specific configuration parameters, and the whims\\n  of statistics. Data reported by `tasty-bench` is only of indicative and\\n  comparative significance.\\n\\n  ### Results\\n\\n  For each of the 4 scenarios, we list the results of running the anti-diff and\\n  legacy approaches 5 times. We run the benchmarks 5 times to get an indication\\n  of whether the results are similar across multiple runs. Furthermore, we\\n  calculate the accompanying *ranges* (if applicable) of improvement factors and\\n  speedups.\\n\\n  Note also the decrease in total bytes allocated and total bytes copied for\\n  the anti-diff approach compared to the legacy approach.\\n\\n  #### Default configuration\\n\\n  |Name|Mean CPU time|2*Stdev (CPU time)|Total bytes allocated|Total bytes copied|Peak memory|\\n  |-|-|-|-|-|-|\\n  |Run 1: AntiDiff|2.533 s (0.23x)|4.7 ms|2.1 GB|557 MB|2.4 GB|\\n  |Run 1: LegacyDiff|10.792 s|162 ms|6.8 GB|2.3 GB|2.4 GB|\\n  |Run 2: AntiDiff|2.508 s (0.23x)|245 ms|2.1 GB|515 MB|2.2 GB|\\n  |Run 2: LegacyDiff|10.850 s| 30 ms|6.9 GB|2.3 GB|2.2 GB|\\n  |Run 3: AntiDiff|2.562 s (0.23x)|5.0 ms|2.1 GB|552 MB|2.2 GB|\\n  |Run 3: LegacyDiff|10.993 s|149 ms|6.9 GB|2.3 GB|2.2 GB|\\n  |Run 4: AntiDiff|2.168 s (0.22x)|5.3 ms|1.8 GB|434 MB|2.0 GB|\\n  |Run 4: LegacyDiff|9.976 s| 39 ms|6.3 GB|2.0 GB|2.0 GB|\\n  |Run 5: AntiDiff|2.527 s (0.23x)| 47 ms|2.1 GB|544 MB|2.2 GB|\\n  |Run 5: LegacyDiff|10.829 s|148 ms|6.8 GB|2.3 GB|2.2 GB|\\n\\n  * Improvement factor: `[0.22, 0.23]`\\n  * Speedup : `[1 / 0.23 ~= 4.35, 1 / 0.22 ~= 4.55]`\\n\\n  #### No rollbacks\\n\\n  |Name|Mean CPU time|2*Stdev (CPU time)|Total bytes allocated|Total bytes copied|Peak memory|\\n  |-|-|-|-|-|-|\\n  |Run 1: AntiDiff|1.638 s (0.19x)| 36 ms|1.4 GB|181 MB|2.4 GB|\\n  |Run 1: LegacyDiff|8.656 s|207 ms|5.7 GB|1.5 GB|2.4 GB|\\n  |Run 2: AntiDiff|1.638 s (0.19x)| 75 ms|1.4 GB|181 MB|2.2 GB|\\n  |Run 2: LegacyDiff|8.654 s|322 ms|5.7 GB|1.5 GB|2.2 GB|\\n  |Run 3: AntiDiff|1.663 s (0.19x)| 74 ms|1.4 GB|181 MB|2.2 GB|\\n  |Run 3: LegacyDiff|8.799 s|216 ms|5.7 GB|1.5 GB|2.2 GB|\\n  |Run 4: AntiDiff|1.645 s (0.19x)| 51 ms|1.4 GB|181 MB|2.0 GB|\\n  |Run 4: LegacyDiff|8.732 s|261 ms|5.7 GB|1.5 GB|2.0 GB|\\n  |Run 5: AntiDiff|1.639 s (0.19x)| 19 ms|1.4 GB|181 MB|2.2 GB|\\n  |Run 5: LegacyDiff|8.653 s|234 ms|5.7 GB|1.5 GB|2.2 GB|\\n\\n  * Improvement factor: `0.19`\\n  * Speedup : `1 / 0.19 ~= 5.25`\\n\\n\\n  #### Only small rollbacks\\n\\n  |Name|Mean CPU time|2*Stdev (CPU time)|Total bytes allocated|Total bytes copied|Peak memory|\\n  |-|-|-|-|-|-|\\n  |Run 1: AntiDiff|1.833 s (0.18x)| 36 ms|1.5 GB|185 MB|2.4 GB|\\n  |Run 1: LegacyDiff|10.362 s|867 ms|5.8 GB|1.6 GB|2.4 GB|\\n  |Run 2: AntiDiff|1.696 s (0.19x)| 30 ms|1.5 GB|185 MB|2.2 GB|\\n  |Run 2: LegacyDiff|8.822 s|106 ms|5.8 GB|1.5 GB|2.2 GB|\\n  |Run 3: AntiDiff|1.702 s (0.19x)| 44 ms|1.5 GB|186 MB|2.2 GB|\\n  |Run 3: LegacyDiff|8.906 s|147 ms|5.8 GB|1.5 GB|2.2 GB|\\n  |Run 4: AntiDiff|1.701 s (0.19x)| 47 ms|1.5 GB|185 MB|2.0 GB|\\n  |Run 4: LegacyDiff|8.949 s|197 ms|5.8 GB|1.5 GB|2.0 GB|\\n  |Run 5: AntiDiff|1.677 s (0.19x)| 55 ms|1.5 GB|186 MB|2.2 GB|\\n  |Run 5: LegacyDiff|8.856 s|177 ms|5.8 GB|1.5 GB|2.2 GB|\\n\\n  * Improvement factor: `[0.18, 0.19]`\\n  * Speedup : `[1 / 0.19 ~= 5.25, 1 / 0.18 ~= 5.55]`\\n\\n  #### No rollbacks, larger flushes (every 100 pushes)\\n\\n  |Name|Mean CPU time|2*Stdev (CPU time)|Total bytes allocated|Total bytes copied|Peak memory|\\n  |-|-|-|-|-|-|\\n  |Run 1: AntiDiff|1.643 s (0.25x)| 21 ms|1.5 GB|196 MB|2.4 GB|\\n  |Run 1: LegacyDiff|6.591 s|351 ms|4.0 GB|1.4 GB|2.4 GB|\\n  |Run 2: AntiDiff|1.616 s (0.25x)| 47 ms|1.5 GB|196 MB|2.2 GB|\\n  |Run 2: LegacyDiff|6.520 s|232 ms|4.0 GB|1.4 GB|2.2 GB|\\n  |Run 3: AntiDiff|1.640 s (0.25x)| 34 ms|1.5 GB|196 MB|2.2 GB|\\n  |Run 3: LegacyDiff|6.540 s|150 ms|4.0 GB|1.4 GB|2.2 GB|\\n  |Run 4: AntiDiff|1.635 s (0.25x)| 76 ms|1.5 GB|196 MB|2.0 GB|\\n  |Run 4: LegacyDiff|6.589 s|131 ms|4.0 GB|1.4 GB|2.0 GB|\\n  |Run 5: AntiDiff|1.628 s (0.25x)| 19 ms|1.5 GB|196 MB|2.2 GB|\\n  |Run 5: LegacyDiff|6.490 s|5.9 ms|4.0 GB|1.4 GB|2.2 GB|\\n\\n  * Improvement factor: `0.25`\\n  * Speedup : `1 / 0.25 ~= 4`\\n\\n## Genesis\\n\\n - We elaborated a draft of the specification of the Genesis implementation and\\n   the ChainSync Jumping optimization. In particular, this includes a proof\\n   sketch that the latter preserves liveness and safety in all cases ([Issue\\n   3964][issue-3964]).\\n      - @nfrisby\'s main realization during this sprint was that he had been\\n        focusing so far on the case where the selected chain is an extension of\\n        the intersection of our peers\' ChainSync candidates.\\n      - This is the main case, ie an \\"absorbing\\" state, but it\'s not the only\\n        case.\\n      - The new proof sketch begins by case splitting on that predicate, and\\n        that made the sketch quite a bit easier to follow.\\n - We continued working on the \\"happy path\\" `ChainSync` Jumping prototype ([Issue\\n   3960][issue-3960]).\\n\\n## Technical debt\\n\\n - We started working on the issues required to re-enable nightly CI runs..\\n   Nightly CI runs have far more lax time constraints, which gives the option to\\n   run significantly more property tests than in our regular CI. To this end, we\\n   merged a PR to easily adapt the number of tests globally ([PR\\n   #3947][pull-3947]).\\n\\n[issue-3954]: https://github.com/input-output-hk/ouroboros-network/issues/3954\\n[branch-3954]: https://github.com/input-output-hk/ouroboros-network/tree/jdral/3954-backingstore-property-tests\\n[issue-3946]: https://github.com/input-output-hk/ouroboros-network/issues/3946\\n[branch-4199]: https://github.com/input-output-hk/ouroboros-network/tree/jdral/CAD-4199-prototype-anti-diffs\\n[pull-3882]: https://github.com/input-output-hk/ouroboros-network/pull/3882\\n[pull-3947]: https://github.com/input-output-hk/ouroboros-network/pull/3947\\n[issue-3960]: https://github.com/input-output-hk/ouroboros-network/issues/3960\\n[issue-3962]: https://github.com/input-output-hk/ouroboros-network/issues/3962\\n[issue-3964]: https://github.com/input-output-hk/ouroboros-network/issues/3964\\n[pull-3971]: https://github.com/input-output-hk/ouroboros-network/pull/3971\\n[issue-3976]: https://github.com/input-output-hk/ouroboros-network/issues/3976"},{"id":"2022-08-12-network","metadata":{"permalink":"/cardano-updates/2022-08-12-network","editUrl":"https://github.com/input-output-hk/cardano-updates/tree/main/blog/blog/2022-08-12-network.md","source":"@site/blog/2022-08-12-network.md","title":"Network Team Update","description":"The networking team took an active part in the project iteration (PI) planning","date":"2022-08-12T00:00:00.000Z","formattedDate":"August 12, 2022","tags":[{"label":"network","permalink":"/cardano-updates/tags/network"}],"readingTime":0.88,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Network Team Update","slug":"2022-08-12-network","authors":"coot","tags":["network"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Team Update","permalink":"/cardano-updates/2022-08-31-consensus"}},"content":"```mdx-code-block\\nimport  ReactPlayer from \'react-player\'\\n```\\n\\n\\nThe networking team took an active part in the project iteration (PI) planning\\nsession, see cardano-node [backlog](https://github.com/orgs/input-output-hk/projects/39) for detailed\\noutcomes.\\n\\n\\n* We started working on a detailed design / implementation plan for gossip.\\n\\n* We merged [input-output-hk/ouroboros-network#3859](https://github.com/input-output-hk/ouroboros-network/pull/3859) which\\n  sets the ouroboros-network repository for the single relay release.\\n\\n* We identified a bug in the network simulator, which is fixed in the\\n  [input-output-hk/ouroboros-network#3852](https://github.com/input-output-hk/ouroboros-network/pull/3852).\\n  The above PR was reviewed.\\n\\n* We set the tracing configuration for nodes which we deploy and fixed and\\n  identified some deployment hiccups.  We identified some bugs in the RT view\\n  which were registered by the maintainers.\\n  [input-output-hk/ouroboros-network-ops#4](https://github.com/input-output-hk/ouroboros-network-ops/pull/4)\\n\\n* We fixed typos in network-mux library:\\n  [input-output-hk/ouroboros-network#3921](https://github.com/input-output-hk/ouroboros-network/pull/3921)\\n\\n* For easy of debugging we renamed a trace point:\\n  [input-output-hk/ouroboros-network#3922](https://github.com/input-output-hk/ouroboros-network/pull/3922)\\n\\n* Duncan iterated on his simulation / visualisation.  He also was able to\\n  identify and fix a bug in the simulator.  The simulation contains 50 nodes.\\n  Dashed lines indicate and established connection, while solid lines indicate\\n  a TCP connection with fully open TCP window.\\n\\n```mdx-code-block\\n<ReactPlayer playing controls url=\'/p2p-relay3.mp4\' />\\n```"}]}')}}]);